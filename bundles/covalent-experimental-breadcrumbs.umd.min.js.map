{"version":3,"sources":["ng://@covalent/experimental/breadcrumbs/breadcrumb/breadcrumb.component.ts","ng://@covalent/experimental/breadcrumbs/breadcrumbs.component.ts","ng://@covalent/experimental/breadcrumbs/breadcrumbs.module.ts"],"names":["TdBreadcrumbComponent","_elementRef","_renderer","_changeDetectorRef","this","_displayCrumb","_width","separatorIcon","_displayIcon","addClass","nativeElement","Object","defineProperty","prototype","shouldDisplay","markForCheck","undefined","ngAfterViewInit","getBoundingClientRect","width","_handleIconClick","event","stopPropagation","preventDefault","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer2","ChangeDetectorRef","HostBinding","TdBreadcrumbsComponent","_resizeSubscription","Subscription","EMPTY","_widthSubject","Subject","_resizing","hiddenBreadcrumbs","Array","ngOnInit","_this","merge","fromEvent","window","pipe","debounceTime","asObservable","distinctUntilChanged","subscribe","setTimeout","displayWidthAvailableCrumbs","ngDoCheck","next","nativeElementWidth","ngAfterContentInit","setCrumbIcons","ngOnDestroy","unsubscribe","element","style","getComputedStyle","borderLeft","parseInt","borderRight","marginLeft","marginRight","paddingLeft","paddingRight","_breadcrumbs","length","breadcrumbArray","toArray","forEach","breadcrumb","curTotCrumbWidth","crumbsArray","i","displayCrumb","push","totalHidden","pop","newTotCrumbWidth","j","ContentChildren","Input","CovalentBreadcrumbsModule","NgModule","imports","CommonModule","MatIconModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  Renderer2,\n  HostBinding,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\n\n@Component({\n  selector: 'td-breadcrumb, a[td-breadcrumb]',\n  styleUrls: ['./breadcrumb.component.scss'],\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdBreadcrumbComponent implements AfterViewInit {\n\n  private _displayCrumb: boolean = true;\n  private _width: number = 0;\n  // Sets the icon url shown between breadcrumbs. Defaults to right chevron\n  separatorIcon: string = 'navigate_next';\n  // Should show the right chevron or not before the label\n  _displayIcon: boolean = true;\n\n  get displayCrumb(): boolean {\n    return this._displayCrumb;\n  }\n\n  /**\n   * Whether to display the crumb or not\n   */\n  set displayCrumb(shouldDisplay: boolean) {\n    this._displayCrumb = shouldDisplay;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Width of the DOM element of the crumb\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Gets the display style of the crumb\n   */\n  @HostBinding('style.display')\n  get displayBinding(): string {\n    // Set the display to none on the component, just in case the end user is hiding\n    // and showing them instead of the component doing itself for reasons like responsive\n    return this._displayCrumb ? undefined : 'none';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _renderer: Renderer2,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'mat-button');\n  }\n\n  ngAfterViewInit(): void {\n    // set the width from the actual rendered DOM element\n    this._width = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().width;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Stop click propagation when clicking on icon\n   */\n  _handleIconClick(event: Event): void {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n}\n","import {\n  Component,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  DoCheck,\n  ChangeDetectorRef,\n  ElementRef,\n  Input,\n} from '@angular/core';\n\nimport {\n  Subscription,\n  Subject,\n  fromEvent,\n  merge,\n} from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n} from 'rxjs/operators';\n\nimport { TdBreadcrumbComponent } from './breadcrumb/breadcrumb.component';\n\n@Component({\n  selector: 'td-breadcrumbs',\n  styleUrls: ['./breadcrumbs.component.scss'],\n  templateUrl: './breadcrumbs.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdBreadcrumbsComponent implements OnInit, DoCheck, AfterContentInit, OnDestroy {\n\n  private _resizeSubscription: Subscription = Subscription.EMPTY;\n  private _widthSubject: Subject<number> = new Subject<number>();\n  private _resizing: boolean = false;\n\n  // all the sub components, which are the individual breadcrumbs\n  @ContentChildren(TdBreadcrumbComponent) _breadcrumbs: QueryList<TdBreadcrumbComponent>;\n  // the list of hidden breadcrumbs not shown right now (responsive)\n  hiddenBreadcrumbs: TdBreadcrumbComponent[] = new Array();\n\n  /**\n   * Sets the icon url shown between breadcrumbs. Defaults to right chevron.\n   */\n  @Input('separatorIcon') separatorIcon: string = 'navigate_next';\n\n  constructor(private _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this._resizeSubscription = merge(\n      fromEvent(window, 'resize').pipe(\n        debounceTime(10),\n      ),\n      this._widthSubject.asObservable().pipe(\n        distinctUntilChanged(),\n      ),\n    ).subscribe(() => {\n      if (!this._resizing) {\n        this._resizing = true;\n        setTimeout(() => {\n          this.displayWidthAvailableCrumbs();\n          this._resizing = false;\n          this._changeDetectorRef.markForCheck();\n        }, 100);\n      }\n    });\n  }\n\n  ngDoCheck(): void {\n    if (this._elementRef && this._elementRef.nativeElement) {\n      this._widthSubject.next(this.nativeElementWidth);\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.setCrumbIcons();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /*\n  * Current width of the element container\n  */\n  get nativeElementWidth(): number {\n    let element: HTMLElement = (<HTMLElement>this._elementRef.nativeElement);\n    // Need to take into account border, margin and padding that might be around all the crumbs\n    let style: CSSStyleDeclaration = window.getComputedStyle(element);\n    let borderLeft: number = parseInt(style.borderLeft, 10);\n    let borderRight: number = parseInt(style.borderRight, 10);\n    let marginLeft: number = parseInt(style.marginLeft, 10);\n    let marginRight: number = parseInt(style.marginRight, 10);\n    let paddingLeft: number = parseInt(style.paddingLeft, 10);\n    let paddingRight: number = parseInt(style.paddingRight, 10);\n\n    return element.getBoundingClientRect().width - borderLeft - borderRight - marginLeft - marginRight - paddingLeft - paddingRight;\n  }\n\n  /**\n   * The total count of individual breadcrumbs\n   */\n  get count(): number {\n    return this._breadcrumbs ? this._breadcrumbs.length : 0;\n  }\n\n  /**\n   * Set the crumb icon separators\n   */\n  private setCrumbIcons(): void {\n    let breadcrumbArray: TdBreadcrumbComponent[] = this._breadcrumbs.toArray();\n    if (breadcrumbArray.length > 0) {\n      // don't show the icon on the last breadcrumb\n      breadcrumbArray[breadcrumbArray.length - 1]._displayIcon = false;\n    }\n    breadcrumbArray.forEach((breadcrumb: TdBreadcrumbComponent) => {\n      breadcrumb.separatorIcon = this.separatorIcon;\n    });\n  }\n\n  private displayWidthAvailableCrumbs(): void {\n    let curTotCrumbWidth: number = 0;\n    let crumbsArray: TdBreadcrumbComponent[] = this._breadcrumbs.toArray();\n    // calculate the current width of the shown breadcrumbs\n    for (let i: number = this.hiddenBreadcrumbs.length; i < crumbsArray.length; i++) {\n      curTotCrumbWidth += crumbsArray[i].width;\n    }\n    // hide the first bread crumb if window size is smaller than all the crumb sizes\n    if (this.nativeElementWidth < curTotCrumbWidth) {\n      crumbsArray[this.hiddenBreadcrumbs.length].displayCrumb = false;\n      this.hiddenBreadcrumbs.push(crumbsArray[this.hiddenBreadcrumbs.length]);\n      this.displayWidthAvailableCrumbs();\n    } else {\n      // loop over all the hidden crumbs and see if adding them back in will\n      // fit in the current window size\n      let totalHidden: number = this.hiddenBreadcrumbs.length - 1;\n      for (let i: number = totalHidden; i >= 0; i--) {\n        let hiddenCrumbWidth: number = crumbsArray[i].width;\n        if ((curTotCrumbWidth + hiddenCrumbWidth) < this.nativeElementWidth) {\n          crumbsArray[i].displayCrumb = true;\n          crumbsArray[i + 1]._displayIcon = true;\n          this.hiddenBreadcrumbs.pop();\n          // recalculate the total width based on adding back in a crumb\n          let newTotCrumbWidth: number = 0;\n          for (let j: number = this.hiddenBreadcrumbs.length; j < crumbsArray.length; j++) {\n            newTotCrumbWidth += crumbsArray[j].width;\n          }\n          curTotCrumbWidth = newTotCrumbWidth;\n        } else if (i === totalHidden) {\n          // need to break out of loop here because the first in the hidden\n          // list can't fit in current window size\n          break;\n        }\n      }\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { TdBreadcrumbsComponent } from './breadcrumbs.component';\nimport { TdBreadcrumbComponent } from './breadcrumb/breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatIconModule,\n  ],\n  declarations: [\n    TdBreadcrumbsComponent,\n    TdBreadcrumbComponent,\n  ],\n  exports: [\n    TdBreadcrumbsComponent,\n    TdBreadcrumbComponent,\n  ],\n})\nexport class CovalentBreadcrumbsModule {\n\n}\n"]}