{"version":3,"file":"covalent-experimental-http.js.map","sources":["ng://@covalent/experimental/http/http.mixin.ts","ng://@covalent/experimental/http/actions/params/abstract-param.decorator.ts","ng://@covalent/experimental/http/actions/methods/abstract-method.decorator.ts","ng://@covalent/experimental/http/actions/methods/get.decorator.ts","ng://@covalent/experimental/http/actions/methods/post.decorator.ts","ng://@covalent/experimental/http/actions/methods/patch.decorator.ts","ng://@covalent/experimental/http/actions/methods/put.decorator.ts","ng://@covalent/experimental/http/actions/methods/delete.decorator.ts","ng://@covalent/experimental/http/actions/class/http.decorator.ts","ng://@covalent/experimental/http/actions/params/param.decorator.ts","ng://@covalent/experimental/http/actions/params/body.decorator.ts","ng://@covalent/experimental/http/actions/params/response.decorator.ts","ng://@covalent/experimental/http/actions/params/query-params.decorator.ts"],"sourcesContent":["import { Type, Injectable, Injector, ÉµReflectionCapabilities, InjectFlags, Optional,\n  SkipSelf, Self, Inject, InjectionToken } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Http, Response, Headers, URLSearchParams } from '@angular/http';\nimport { HttpInterceptorService } from '@covalent/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport type TdHttpMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE' | 'HEAD' | 'PUT' | 'OPTIONS';\n\nexport type TdHttpRESTResponseType = 'arraybuffer' | 'blob' | 'json' | 'text';\n\nexport type TdHttpRESTObserve = 'body' | 'response' | 'events';\n\nexport interface ITdHttpRESTConfig {\n  baseHeaders?: HttpHeaders;\n  baseUrl: string;\n  defaultObserve?: TdHttpRESTObserve;\n  defaultResponseType?: TdHttpRESTResponseType;\n  httpServiceType?: Type<Http | HttpClient | HttpInterceptorService>;\n}\n\nexport interface ITdHttpRESTOptions {\n  headers?: HttpHeaders | {\n    [header: string]: string | string[];\n  };\n  observe?: TdHttpRESTObserve;\n  params?: HttpParams | {\n    [param: string]: string | string[];\n  };\n  responseType?: TdHttpRESTResponseType;\n  reportProgress?: boolean;\n  withCredentials?: boolean;\n}\n\nexport interface ITdHttpRESTOptionsWithBody extends ITdHttpRESTOptions {\n  body?: any;\n}\n\nexport const NOOP_HTTP: Observable<any> = of(undefined);\n\ntype Constructor<T> = new (...args: any[]) => T;\n\n/**\n * DO NOT MODIFY\n * Taken from angular since they dont expose this function\n * This is used internally to inject services from the constructor of the base service using the mixinHttp\n * @internal\n */\nfunction injectArgs(types: (Type<any>| InjectionToken<any>| any[])[], injector: Injector): any[] {\n  const args: any[] = [];\n  for (let i: number = 0; i < types.length; i++) {\n    const arg: any = types[i];\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new Error('Arguments array must have arguments.');\n      }\n      let type: Type<any>|undefined = undefined;\n      let flags: InjectFlags = InjectFlags.Default;\n\n      for (let j: number = 0; j < arg.length; j++) {\n        const meta: any = arg[j];\n        if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n          /* tslint:disable */\n          flags |= InjectFlags.Optional;\n        } else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n          flags |= InjectFlags.SkipSelf;\n        } else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n          flags |= InjectFlags.Self;\n        } else if (meta instanceof Inject) {\n          type = meta.token;\n        } else {\n          type = meta;\n        }\n        /* tslint:enable */\n      }\n\n      args.push(injector.get(type !, flags));\n    } else {\n      args.push(injector.get(arg));\n    }\n  }\n  return args;\n}\n\n/** \n * Mixin to augment a service with http helpers.\n * @internal\n */\nexport function mixinHttp(base: any, config: ITdHttpRESTConfig): Constructor<any> {\n  /**\n   * Internal class used to get an instance of Injector for internal usage plus also\n   * a way to inject services from the constructor of the underlying service\n   * @internal\n   */\n  @Injectable()\n  abstract class HttpInternalClass extends base {\n    constructor(public _injector: Injector) {\n      super(...injectArgs(new ÉµReflectionCapabilities().parameters(base), _injector));\n      this.buildConfig();\n    }\n    abstract buildConfig(): void;\n  }\n  /**\n   * Actuall class being returned with all the hooks for http usage\n   * @internal\n   */\n  return class extends HttpInternalClass {\n    private _baseUrl: string;\n    get baseUrl(): string {\n      return (typeof(this.basePath) === 'string' ?\n        this.basePath.replace(/\\/$/, '') : '') + this._baseUrl;\n    }\n    private _baseHeaders: HttpHeaders;\n    private _defaultObserve?: TdHttpRESTObserve;\n    private _defaultResponseType?: TdHttpRESTResponseType;\n\n    http: HttpClient | HttpInterceptorService | Http;\n\n    /**\n     * Method used to setup the configuration parameters and get an instance of the http service\n     */\n    buildConfig(): void {\n      this.http = this._injector.get(config.httpServiceType || HttpClient);\n      this._baseUrl = config && config.baseUrl ? config.baseUrl.replace(/\\/$/, '') : '';\n      this._baseHeaders = config && config.baseHeaders ? config.baseHeaders : new HttpHeaders();\n      this._defaultObserve = config && config.defaultObserve ? config.defaultObserve : 'body';\n      this._defaultResponseType = config && config.defaultResponseType ? config.defaultResponseType : 'json';\n    }\n\n    /**\n     * Method used to build the default headers using the base headers\n     */\n    buildHeaders(): HttpHeaders {\n      let headersObj: {[key: string]: any} = {};\n      this._baseHeaders.keys().forEach((key: any) => {\n        headersObj[key] = this._baseHeaders.get(key);\n      });\n      return new HttpHeaders(headersObj);\n    }\n\n    /* tslint:disable-next-line */\n    buildRequest<Response>(method: 'POST' | 'PUT' | 'PATCH', url: string, options?: ITdHttpRESTOptionsWithBody): Observable<Response>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: 'POST' | 'PUT' | 'PATCH', url: string, options?: ITdHttpRESTOptionsWithBody): Observable<HttpResponse>;\n    /* tslint:disable-next-line */\n    buildRequest<Response>(method: 'GET' | 'DELETE', url: string, options?: ITdHttpRESTOptions): Observable<Response>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: 'GET' | 'DELETE', url: string, options?: ITdHttpRESTOptions): Observable<HttpResponse>;\n    /* tslint:disable-next-line */\n    buildRequest<Response>(method: TdHttpMethod, url: string, options?: ITdHttpRESTOptionsWithBody): Observable<Response>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: TdHttpMethod, url: string, options?: ITdHttpRESTOptionsWithBody): Observable<HttpResponse> {\n      return this._buildRequest(method, url, options);\n    }\n\n    /**\n     * Method used to build the request depending on the `http` service and TdHttpMethod\n     */\n    private _buildRequest(method: TdHttpMethod, url: string, options: ITdHttpRESTOptionsWithBody = {}): Observable<any> {\n      if (!options.responseType) {\n        options.responseType = this._defaultResponseType;\n      }\n      if (!options.observe) {\n        options.observe = this._defaultObserve;\n      }\n      if (!options.headers) {\n        options.headers = this.buildHeaders();\n      } else {\n        let headers: HttpHeaders = this.buildHeaders();\n        if (options.headers instanceof HttpHeaders) {\n          (<HttpHeaders>options.headers).keys().forEach((key: any) => {\n            headers = headers.set(key, (<HttpHeaders>options.headers).get(key));\n          });\n        } else {\n          for (let key in options.headers) {\n            headers = headers.set(key, <any>options.headers[key]);\n          }\n        }\n        options.headers = headers;\n      }\n      if (this.http instanceof HttpInterceptorService || this.http instanceof Http) {\n        let headers: Headers = new Headers();\n        (<HttpHeaders>options.headers).keys().forEach((key: any) => {\n          headers.set(key, (<HttpHeaders>options.headers).get(key));\n        });\n        let params: URLSearchParams = new URLSearchParams();\n        if (options.params) {\n          if (options.params instanceof HttpParams) {\n            options.params.keys().forEach((key: string) => {\n              params.set(key, (<HttpParams>options.params).get(key));\n            });\n          } else {\n            for (let key in options.params) {\n              params.set(key, <any>options.params[key]);\n            }\n          }\n        }\n        let observable: Observable<Response> = (<HttpInterceptorService>this.http).request(url, {\n          headers: headers,\n          method: method,\n          body: options.body ? options.body : undefined,\n          params: params,\n        });\n        if (options.observe === 'body') {\n          if (options.responseType === 'json') {\n            return <any>observable.pipe(\n              map((response: Response) => response.json()),\n            );\n          } else if (options.responseType === 'text') {\n            return <any>observable.pipe(\n              map((response: Response) => response.text()),\n            );\n          } else if (options.responseType === 'blob') {\n            return <any>observable.pipe(\n              map((response: Response) => response.blob()),\n            );\n          } else if (options.responseType === 'arraybuffer') {\n            return <any>observable.pipe(\n              map((response: Response) => response.arrayBuffer()),\n            );\n          }\n        } else if (options.observe === 'events') {\n          throw Error('\"events\" not suppported in @angular/http');\n        }\n        return observable;\n      } else {\n        return (<HttpClient>this.http).request(method, url, options);\n      }\n    }\n  };\n}\n","declare const Reflect: any;\nexport type TdParamType = 'param' | 'response' | 'body' | 'queryParams';\n\nexport const tdHttpRESTParam: Symbol = Symbol('TdHttpRESTParam');\n\n/**\n * Abstract implementation of the http param decorator\n * @internal\n */\nexport function TdAbstractParam(type: TdParamType, param?: string): Function {\n  return function (target: Object, propertyKey: string | symbol, parameterIndex: number): void {\n    let parameters: { index: number, param: string, type: TdParamType }[] = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyKey) || [];\n    parameters.push({\n      index: parameterIndex,\n      param: param,\n      type: type,\n    });\n    Reflect.defineMetadata(tdHttpRESTParam, parameters, target, propertyKey);\n  };\n}\n","import { HttpParams } from '@angular/common/http';\n\nimport { TdHttpMethod, ITdHttpRESTOptions, ITdHttpRESTOptionsWithBody, NOOP_HTTP } from '../../http.mixin';\nimport { TdParamType, tdHttpRESTParam } from '../params/abstract-param.decorator';\n\ndeclare const Reflect: any;\n\n/**\n * Method used to copy parameters from an array or HttpParams object\n * into a centrilized HttpParams object\n * @internal\n */\nexport function parseParams(target: HttpParams, source: HttpParams | {[key: string]: string | string[]}): HttpParams {\n  let queryParams: HttpParams = target;\n  if (source instanceof HttpParams) {\n    source.keys().forEach((key: string) => {\n      // skip if value is undefined\n      if ((<HttpParams>source).get(key) !== undefined) {\n        queryParams = queryParams.set(key, (<HttpParams>source).get(key));\n      }\n    });\n  } else {\n    for (let key in source) {\n      // skip if value is undefined\n      if (<any>source[key] !== undefined) {\n        queryParams = queryParams.set(key, <any>source[key]);\n      }\n    }\n  }\n  return queryParams;\n}\n\n/**\n * Abstract implementation of the http method decorator\n * @internal\n */\nexport function TdAbstractMethod(config: {\n  method: TdHttpMethod,\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return function (target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>): any {\n    let wrappedFunction: Function = descriptor.value;\n    // replace method call with our own and proxy it\n    descriptor.value = function (): any {\n      try {\n        let replacedPath: string = config.path;\n        let parameters: { index: number, param: string, type: TdParamType }[] = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyName);\n        let newArgs: any[] = [];\n        let body: any;\n        let queryParams: HttpParams = new HttpParams();\n        if (parameters) {\n          // map parameters and see which type they are to act on them\n          for (let parameter of parameters) {\n            if (parameter.type === 'param') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              replacedPath = replacedPath.replace(':' + parameter.param, arguments[parameter.index]);\n            } else if (parameter.type === 'body') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              body = arguments[parameter.index];\n            } else if (parameter.type === 'queryParams') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              let qParams: HttpParams | {[key: string]: string | string[]} = arguments[parameter.index];\n              if (config.options && config.options.params) {\n                queryParams = parseParams(queryParams, config.options.params);\n              }\n              if (qParams) {\n                queryParams = parseParams(queryParams, qParams);\n              }\n            }\n          }\n        }\n        // tslint:disable-next-line\n        let url: string = this.baseUrl + replacedPath;\n        let options: ITdHttpRESTOptionsWithBody = Object.assign({}, config.options, {\n          body: body,\n          params: queryParams,\n        });\n        // tslint:disable-next-line\n        let request: any = this.buildRequest(config.method, url, options);\n        if (parameters) {\n          // see which one was the response parameter so we can set the request observable\n          for (let parameter of parameters) {\n            if (parameter.type === 'response') {\n              newArgs[parameter.index] = request;\n            }\n          }\n        }\n        // tslint:disable-next-line\n        let response: any = wrappedFunction.apply(this, newArgs);\n        // if the response is NOOP_HTTP or undefined, then we return the request as it is\n        // else we return the response from the inner function\n        if (response === NOOP_HTTP || response === undefined) {\n          return request;\n        } else {\n          return response;\n        }\n      } catch (error) {\n        // tslint:disable-next-line\n        console.error(error);\n      }\n    };\n  };\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds GET request capabilities to a method\n */\nexport function GET(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'GET',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds POST request capabilities to a method\n */\nexport function POST(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'POST',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds PATCH request capabilities to a method\n */\nexport function PATCH(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'PATCH',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds PUT request capabilities to a method\n */\nexport function PUT(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'PUT',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds DELETE request capabilities to a method\n */\nexport function DELETE(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'DELETE',\n  }, config));\n}\n","import { mixinHttp, ITdHttpRESTConfig } from '../../http.mixin';\n\n/**\n * Decorator used to give a service http capabilities\n */\nexport function TdHttp(config: ITdHttpRESTConfig): Function {\n  return function <T extends { new(...args: any[]): {} }>(constructor: any): any {\n    return class extends mixinHttp(constructor, config) {\n     \n    };\n  };\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is an http parameter in a method\n */\nexport function TdParam(param: string): Function {\n  return TdAbstractParam('param', param);\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http body in a method\n */\nexport function TdBody(): Function {\n  return TdAbstractParam('body');\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http response in a method\n */\nexport function TdResponse(): Function {\n  return TdAbstractParam('response');\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http query parameters in a method\n */\nexport function TdQueryParams(): Function {\n  return TdAbstractParam('queryParams');\n}\n"],"names":["tslib_1.__extends","tslib_1.__values"],"mappings":"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"}
