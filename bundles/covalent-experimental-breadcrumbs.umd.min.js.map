{
  "version": 3,
  "file": "covalent-experimental-breadcrumbs.umd.min.js",
  "sources": [
    "ng://@covalent/experimental/breadcrumbs/out/breadcrumb/breadcrumb.component.ts",
    "ng://@covalent/experimental/breadcrumbs/out/breadcrumbs.component.ts",
    "ng://@covalent/experimental/breadcrumbs/out/breadcrumbs.module.ts"
  ],
  "sourcesContent": [
    "import {\n  Component,\n  ElementRef,\n  Renderer2,\n  HostBinding,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\n\n@Component({\n  selector: 'td-breadcrumb, a[td-breadcrumb]',\n  styles: [`:host .td-breadcrumb{height:48px;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-ms-flex-line-pack:center;align-content:center;max-width:100%;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end}:host .td-breadcrumb ::ng-deep>*{margin:0 10px}:host mat-icon.material-icons.mat-icon{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle}:host.mat-button{min-width:0;padding:0}`],\n  template: `<span *ngIf=\"displayCrumb\" class=\"td-breadcrumb\">\n  <ng-content></ng-content>\n  <mat-icon *ngIf=\"_displayIcon\"\n            [style.cursor]=\"'default'\"\n            (click)=\"_handleIconClick($event)\">\n    {{separatorIcon}}\n  </mat-icon>\n</span>\n`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdBreadcrumbComponent implements AfterViewInit {\n\n  private _displayCrumb: boolean = true;\n  private _width: number = 0;\n  // Sets the icon url shown between breadcrumbs. Defaults to right chevron\n  separatorIcon: string = 'navigate_next';\n  // Should show the right chevron or not before the label\n  _displayIcon: boolean = true;\n\n  get displayCrumb(): boolean {\n    return this._displayCrumb;\n  }\n\n  /**\n   * Whether to display the crumb or not\n   */\n  set displayCrumb(shouldDisplay: boolean) {\n    this._displayCrumb = shouldDisplay;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Width of the DOM element of the crumb\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  // Set the display to none on the component, just in case the end user is hiding\n  // and showing them instead of the component doing itself for reasons like responsive\n  @HostBinding('style.display')\n  private get displayBinding(): string {\n    return this._displayCrumb ? undefined : 'none';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _renderer: Renderer2,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'mat-button');\n  }\n\n  ngAfterViewInit(): void {\n    // set the width from the actual rendered DOM element\n    this._width = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().width;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Stop click propagation when clicking on icon\n   */\n  _handleIconClick(event: Event): void {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n}\n",
    "import {\n  Component,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  DoCheck,\n  ChangeDetectorRef,\n  ElementRef,\n  Input,\n} from '@angular/core';\n\nimport {\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\n\nimport { TdBreadcrumbComponent } from './breadcrumb/breadcrumb.component';\n\n@Component({\n  selector: 'td-breadcrumbs',\n  styles: [`:host .td-breadcrumbs{white-space:nowrap}`],\n  template: `<div class=\"td-breadcrumbs\">\n  <ng-content></ng-content>\n</div>\n`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdBreadcrumbsComponent implements OnInit, DoCheck, AfterContentInit, OnDestroy {\n\n  private _resizeSubscription: Subscription = Subscription.EMPTY;\n  private _widthSubject: Subject<number> = new Subject<number>();\n  private _resizing: boolean = false;\n\n  // all the sub components, which are the individual breadcrumbs\n  @ContentChildren(TdBreadcrumbComponent) _breadcrumbs: QueryList<TdBreadcrumbComponent>;\n  // the list of hidden breadcrumbs not shown right now (responsive)\n  hiddenBreadcrumbs: TdBreadcrumbComponent[] = new Array();\n\n  /**\n   * Sets the icon url shown between breadcrumbs. Defaults to right chevron.\n   */\n  @Input('separatorIcon') separatorIcon: string = 'navigate_next';\n\n  constructor(private _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this._resizeSubscription = merge(\n      fromEvent(window, 'resize').pipe(\n        debounceTime(10),\n      ),\n      this._widthSubject.asObservable().pipe(\n        distinctUntilChanged(),\n      ),\n    ).subscribe(() => {\n      if (!this._resizing) {\n        this._resizing = true;\n        setTimeout(() => {\n          this.displayWidthAvailableCrumbs();\n          this._resizing = false;\n          this._changeDetectorRef.markForCheck();\n        }, 100);\n      }\n    });\n  }\n\n  ngDoCheck(): void {\n    if (this._elementRef && this._elementRef.nativeElement) {\n      this._widthSubject.next(this.nativeElementWidth);\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.setCrumbIcons();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /*\n  * Current width of the element container\n  */\n  get nativeElementWidth(): number {\n    return (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().width;\n  } \n\n  /**\n   * The total count of individual breadcrumbs\n   */\n  get count(): number {\n    return this._breadcrumbs ? this._breadcrumbs.length : 0;\n  }\n\n  /**\n   * Set the crumb icon separators\n   */\n  private setCrumbIcons(): void {\n    let breadcrumbArray: TdBreadcrumbComponent[] = this._breadcrumbs.toArray();\n    if (breadcrumbArray.length > 0) {\n      // don't show the icon on the last breadcrumb\n      breadcrumbArray[breadcrumbArray.length - 1]._displayIcon = false;\n    }\n    breadcrumbArray.forEach((breadcrumb: TdBreadcrumbComponent) => {\n      breadcrumb.separatorIcon = this.separatorIcon;\n    });\n  }\n\n  private displayWidthAvailableCrumbs(): void {\n    let curTotCrumbWidth: number = 0;\n    let crumbsArray: TdBreadcrumbComponent[] = this._breadcrumbs.toArray();\n    // calculate the current width of the shown breadcrumbs\n    for (let i: number = this.hiddenBreadcrumbs.length; i < crumbsArray.length; i++) {\n      curTotCrumbWidth += crumbsArray[i].width;\n    }\n    // hide the first bread crumb if window size is smaller than all the crumb sizes\n    if (this.nativeElementWidth < curTotCrumbWidth) {\n      crumbsArray[this.hiddenBreadcrumbs.length].displayCrumb = false;\n      this.hiddenBreadcrumbs.push(crumbsArray[this.hiddenBreadcrumbs.length]);\n      this.displayWidthAvailableCrumbs();\n    } else {\n      // loop over all the hidden crumbs and see if adding them back in will \n      // fit in the current window size\n      let totalHidden: number = this.hiddenBreadcrumbs.length - 1;\n      for (let i: number = totalHidden; i >= 0; i--) {\n        let hiddenCrumbWidth: number = crumbsArray[i].width;\n        if ((curTotCrumbWidth + hiddenCrumbWidth) < this.nativeElementWidth) {\n          crumbsArray[i].displayCrumb = true;\n          crumbsArray[i + 1]._displayIcon = true;\n          this.hiddenBreadcrumbs.pop();\n          // recalculate the total width based on adding back in a crumb\n          let newTotCrumbWidth: number = 0;\n          for (let j: number = this.hiddenBreadcrumbs.length; j < crumbsArray.length; j++) {\n            newTotCrumbWidth += crumbsArray[j].width;\n          }\n          curTotCrumbWidth = newTotCrumbWidth;\n        } else if (i === totalHidden) {\n          // need to break out of loop here because the first in the hidden\n          // list can't fit in current window size\n          break;\n        }\n      }\n    }\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { TdBreadcrumbsComponent } from './breadcrumbs.component';\nimport { TdBreadcrumbComponent } from './breadcrumb/breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatIconModule,\n  ],\n  declarations: [\n    TdBreadcrumbsComponent,\n    TdBreadcrumbComponent,\n  ],\n  exports: [\n    TdBreadcrumbsComponent,\n    TdBreadcrumbComponent,\n  ],\n})\nexport class CovalentBreadcrumbsModule {\n\n}\n"
  ],
  "names": [
    "TdBreadcrumbComponent",
    "_elementRef",
    "_renderer",
    "_changeDetectorRef",
    "this",
    "_displayCrumb",
    "_width",
    "separatorIcon",
    "_displayIcon",
    "addClass",
    "nativeElement",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "set",
    "shouldDisplay",
    "markForCheck",
    "undefined",
    "ngAfterViewInit",
    "getBoundingClientRect",
    "width",
    "_handleIconClick",
    "event",
    "stopPropagation",
    "preventDefault",
    "type",
    "Component",
    "args",
    "selector",
    "styles",
    "template",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "ElementRef",
    "Renderer2",
    "ChangeDetectorRef",
    "displayBinding",
    "HostBinding",
    "TdBreadcrumbsComponent",
    "_resizeSubscription",
    "Subscription",
    "EMPTY",
    "_widthSubject",
    "Subject",
    "_resizing",
    "hiddenBreadcrumbs",
    "Array",
    "ngOnInit",
    "_this",
    "merge",
    "fromEvent",
    "window",
    "pipe",
    "debounceTime",
    "asObservable",
    "distinctUntilChanged",
    "subscribe",
    "setTimeout",
    "displayWidthAvailableCrumbs",
    "ngDoCheck",
    "next",
    "nativeElementWidth",
    "ngAfterContentInit",
    "setCrumbIcons",
    "ngOnDestroy",
    "unsubscribe",
    "_breadcrumbs",
    "length",
    "breadcrumbArray",
    "toArray",
    "forEach",
    "breadcrumb",
    "curTotCrumbWidth",
    "crumbsArray",
    "i",
    "displayCrumb",
    "push",
    "totalHidden",
    "pop",
    "newTotCrumbWidth",
    "j",
    "ContentChildren",
    "Input",
    "CovalentBreadcrumbsModule",
    "NgModule",
    "imports",
    "CommonModule",
    "MatIconModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
