{"version":3,"file":"covalent-experimental.js.map","sources":["ng://@covalent/experimental/template-rename-me-experiment-module/rename-me.component.ts","ng://@covalent/experimental/template-rename-me-experiment-module/rename-me.module.ts","ng://@covalent/experimental/nav-stepper/nav-step/nav-step.component.ts","ng://@covalent/experimental/nav-stepper/horizontal-nav-stepper/horizontal-nav-stepper.component.ts","ng://@covalent/experimental/nav-stepper/nav-step-header/nav-step-header.component.ts","ng://@covalent/experimental/nav-stepper/nav-stepper.module.ts","ng://@covalent/experimental/http/http.mixin.ts","ng://@covalent/experimental/http/actions/params/abstract-param.decorator.ts","ng://@covalent/experimental/http/actions/methods/abstract-method.decorator.ts","ng://@covalent/experimental/http/actions/methods/get.decorator.ts","ng://@covalent/experimental/http/actions/methods/post.decorator.ts","ng://@covalent/experimental/http/actions/methods/patch.decorator.ts","ng://@covalent/experimental/http/actions/methods/put.decorator.ts","ng://@covalent/experimental/http/actions/methods/delete.decorator.ts","ng://@covalent/experimental/http/actions/class/http.decorator.ts","ng://@covalent/experimental/http/actions/params/param.decorator.ts","ng://@covalent/experimental/http/actions/params/body.decorator.ts","ng://@covalent/experimental/http/actions/params/response.decorator.ts","ng://@covalent/experimental/http/actions/params/query-params.decorator.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'td-renameMe',\n  styleUrls: ['./rename-me.component.scss'],\n  templateUrl: './rename-me.component.html',\n})\nexport class TdRenameMeComponent {\n\n  constructor() {\n    // stub\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TdRenameMeComponent } from './rename-me.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TdRenameMeComponent,\n  ],\n  exports: [\n    TdRenameMeComponent,\n  ],\n})\nexport class CovalentRenameMeModule {\n\n}\n","import { Component, ElementRef, HostBinding, AfterViewInit, OnInit, Renderer2,\n         ChangeDetectionStrategy, ChangeDetectorRef, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\nexport enum StepState {\n  None = 'none',\n  Required = 'required',\n  Complete = 'complete',\n}\n\n@Component({\n  selector: 'td-nav-step, a[td-nav-step]',\n  styleUrls: ['./nav-step.component.scss'],\n  templateUrl: './nav-step.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdNavStepComponent implements AfterViewInit, OnInit {\n\n  private _displayStep: boolean = true;\n  private _displayLine: boolean = true;\n  private _width: number = 0;\n  private _active: boolean = false;\n\n  // Number to display in step header\n  number: number;\n\n  /**\n   * routerLink?: string\n   * routerLink to navigate to\n   * Defaults to empty\n   */\n  @Input('routerLink') routerLink: string;\n\n  /**\n   * state?: StepState\n   * state of step\n   * Defaults to none\n   */\n  @Input('state') state: StepState = StepState.None;\n\n  /**\n   * sublabel?: string\n   * Sublabel to display in step header\n   * Defaults to empty\n   */\n  @Input('sublabel') sublabel: string;\n\n  constructor(private _elementRef: ElementRef,\n    private router: Router,\n    private _renderer: Renderer2,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'mat-button');\n  }\n\n  isRequired(): boolean {\n    return true;\n  }\n\n  isComplete(): boolean {\n    return true;\n  }\n\n  get displayStep(): boolean {\n    return this._displayStep;\n  }\n\n  /**\n   * Whether to display the step or not\n   */\n  set displayStep(shouldDisplay: boolean) {\n    this._displayStep = shouldDisplay;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get displayLine(): boolean {\n    return this._displayLine;\n  }\n\n  /**\n   * Whether to display the step or not\n   */\n  set displayLine(shouldDisplay: boolean) {\n    this._displayLine = shouldDisplay;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Whether step is active\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * Width of the DOM element of the step\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Gets the display style of the crumb\n   */\n  @HostBinding('style.display')\n  get displayBinding(): string {\n    // Set the display to none on the component, just in case the end user is hiding\n    // and showing them instead of the component doing itself for reasons like responsive\n    return this._displayStep ? undefined : 'none';\n  }\n\n  ngAfterViewInit(): void {\n    // set the width from the actual rendered DOM element\n    Promise.resolve().then(() => {\n      this._width = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().width;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnInit(): void {\n    // Set this step to active if the step route and active route are the same\n    if (this.router.url === this.routerLink) {\n      this._active = true;\n    }\n  }\n\n}\n","import { Component, ContentChildren, QueryList, OnInit, OnDestroy, ChangeDetectionStrategy, \n         AfterContentInit, DoCheck, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { Subscription, Subject, fromEvent, merge } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nimport { TdNavStepComponent } from '../nav-step/nav-step.component';\n\n@Component({\n  selector: 'td-horizontal-nav-stepper',\n  styleUrls: ['./horizontal-nav-stepper.component.scss'],\n  templateUrl: './horizontal-nav-stepper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdHorizontalStepperComponent implements OnInit, DoCheck, AfterContentInit, OnDestroy {\n\n  private _resizeSubscription: Subscription = Subscription.EMPTY;\n  private _widthSubject: Subject<number> = new Subject<number>();\n  private _resizing: boolean = false;\n  private _showLeftArrow: boolean = false;\n  private _showRightArrow: boolean = false;\n  private _leftHidden: number = 0;\n  private _rightHidden: number = 0;\n\n  // all the sub components, which are the individual steps\n  @ContentChildren(TdNavStepComponent) _steps: QueryList<TdNavStepComponent>;\n  // the list of hidden steps not shown right now (responsive)\n  hiddenSteps: TdNavStepComponent[] = new Array();\n\n  constructor(private _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this._resizeSubscription = merge(\n      fromEvent(window, 'resize').pipe(\n        debounceTime(10),\n      ),\n      this._widthSubject.asObservable().pipe(\n        distinctUntilChanged(),\n      ),\n    ).subscribe(() => {\n      if (!this._resizing) {\n        this._resizing = true;\n        setTimeout(() => {\n          this.displayWidthAvailableSteps();\n          this._resizing = false;\n          this._changeDetectorRef.markForCheck();\n        }, 100);\n      }\n    });\n  }\n\n  ngDoCheck(): void {\n    if (this._elementRef && this._elementRef.nativeElement) {\n      this._widthSubject.next(this.nativeElementWidth);\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.setStepSettings();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /*\n  * Current width of the element container\n  */\n  get nativeElementWidth(): number {\n    let element: HTMLElement = (<HTMLElement>this._elementRef.nativeElement);\n\n    // Need to take into account border, margin and padding that might be around all the crumbs\n    let style: CSSStyleDeclaration = window.getComputedStyle(element);\n    let borderLeft: number = parseInt(style.borderLeft, 10);\n    let borderRight: number = parseInt(style.borderRight, 10);\n    let marginLeft: number = parseInt(style.marginLeft, 10);\n    let marginRight: number = parseInt(style.marginRight, 10);\n    let paddingLeft: number = parseInt(style.paddingLeft, 10);\n    let paddingRight: number = parseInt(style.paddingRight, 10);\n\n    return element.getBoundingClientRect().width - borderLeft - borderRight - marginLeft - marginRight - paddingLeft - paddingRight;\n  }\n\n  /**\n   * The total count of individual steps\n   */\n  get count(): number {\n    return this._steps ? this._steps.length : 0;\n  }\n\n  /**\n   * Should we show the left Arrow\n   */\n  get showLeftArrow(): boolean {\n    return this._showLeftArrow;\n  }\n\n  /**\n   * Should we show the right Arrow\n   */\n  get showRightArrow(): boolean {\n    return this._showRightArrow;\n  }\n\n  public showHiddenLeftStep(): void {\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    // show the left one\n    stepsArray[this._leftHidden - 1].displayStep = true;\n    this.hiddenSteps.splice(this._leftHidden - 1, 1);\n    this._leftHidden--;\n    // If no more hidden steps then hide left arrow\n    if (this._leftHidden === 0) {\n      this._showLeftArrow = false;\n    }\n\n    // hide the right one\n    stepsArray[stepsArray.length - (this._rightHidden + 1)].displayStep = false;\n    stepsArray[stepsArray.length - (this._rightHidden + 2)].displayLine = false;\n    this.hiddenSteps.push(stepsArray[stepsArray.length - 1]);\n    this._rightHidden++;\n\n    this._showRightArrow = true;\n  }\n\n  public showHiddenRightStep(): void {\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    // show the right one\n    stepsArray[stepsArray.length - this._rightHidden].displayStep = true;\n    stepsArray[stepsArray.length - (this._rightHidden + 1)].displayLine = true;\n    this.hiddenSteps.pop();\n    this._rightHidden--;\n    // If no more hidden steps then hide right arrow\n    if (this._rightHidden === 0) {\n      this._showRightArrow = false;\n    }\n\n    // hide the left one\n    stepsArray[this._leftHidden].displayStep = false;\n    this.hiddenSteps.push(stepsArray[this._leftHidden]);\n    this._leftHidden++;\n\n    this._showLeftArrow = true;\n  }\n\n  /**\n   * Set the step line separators and display numbers\n   */\n  private setStepSettings(): void {\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    if (stepsArray.length > 0) {\n      // don't show the icon on the last breadcrumb\n      stepsArray[stepsArray.length - 1].displayLine = false;\n    }\n    // set the index number of the step so can display that number in circle\n    stepsArray.forEach((step: TdNavStepComponent, index: number) => {\n      step.number = index + 1;\n    });\n  }\n\n  private displayWidthAvailableSteps(): void {\n    let curTotStepWidth: number = 0;\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    // calculate the current width of the shown steps\n    for (let i: number = this.hiddenSteps.length; i < stepsArray.length; i++) {\n      curTotStepWidth += stepsArray[i].width;\n    }\n    // get the active step index\n    let activeIndex: number = stepsArray.findIndex((step: TdNavStepComponent) => {\n      return step.active === true;\n    });\n    // hide the first step if window size is smaller than all the step sizes\n    if (this.nativeElementWidth < curTotStepWidth) {\n      // determine if the active step is in the first or second half of the list\n      // and check that all the left ones aren't already hidden (2nd check after && does that)\n      // and hide on the opposite side of that\n      if ((activeIndex >= stepsArray.length / 2) && (this._leftHidden < activeIndex)) {\n        // left\n        this._showRightArrow = false;\n        this._showLeftArrow = true;\n        this._leftHidden++;\n        stepsArray[this._leftHidden - 1].displayStep = false;\n        this.hiddenSteps.push(stepsArray[this.hiddenSteps.length]);\n      // Check to see that all the possible ones on the right aren't already hidden\n      } else if (this._rightHidden < stepsArray.length - activeIndex) {\n        // right\n        this._showRightArrow = true;\n        this._showLeftArrow = false;\n        this._rightHidden++;\n        stepsArray[stepsArray.length - this._rightHidden].displayStep = false;\n        this.hiddenSteps.push(stepsArray[stepsArray.length - this._rightHidden]);\n      }\n      this.displayWidthAvailableSteps();\n    } else {\n      // loop over all the hidden steps and see if adding them back in will\n      // fit in the current window size\n      let totalHidden: number = this.hiddenSteps.length - 1;\n      for (let i: number = totalHidden; i >= 0; i--) {\n        let hiddenStepWidth: number = stepsArray[i].width;\n        if ((curTotStepWidth + hiddenStepWidth) < this.nativeElementWidth) {\n          // Determine if the active step is in the first or second half of the list\n          // and if its right and there are hidden left steps\n          // or if it left and there are no right hidden ones and some left hidden (using arrows can cause it to be unbalanced)\n          // then show the hidden ones on the left\n          if ((activeIndex >= stepsArray.length / 2 && this._leftHidden > 0) || \n              (activeIndex < stepsArray.length / 2 && this._rightHidden === 0 && this._leftHidden > 0)) {\n            // left\n            stepsArray[this._leftHidden - 1].displayStep = true;\n            this.hiddenSteps.shift();\n            this._leftHidden--;\n            // If no more hidden steps then hide left arrow\n            if (this._leftHidden === 0) {\n              this._showLeftArrow = false;\n            }\n          // Check if there are any on the right hidden and show them\n          } else if (this._rightHidden > 0) {\n            // right\n            stepsArray[stepsArray.length - this._rightHidden].displayStep = true;\n            this.hiddenSteps.pop();\n            this._rightHidden--;\n            // If no more hidden steps then hide right arrow\n            if (this._rightHidden === 0) {\n              this._showRightArrow = false;\n            }\n          }\n          // recalculate the total width based on adding back in a step\n          let newTotStepWidth: number = 0;\n          for (let j: number = this.hiddenSteps.length; j < stepsArray.length; j++) {\n            newTotStepWidth += stepsArray[j].width;\n          }\n          curTotStepWidth = newTotStepWidth;\n        } else if (i === totalHidden) {\n          // need to break out of loop here because the first in the hidden\n          // list can't fit in current window size\n          break;\n        }\n      }\n    }\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ICanDisable, mixinDisabled, ICanDisableRipple, mixinDisableRipple } from '@covalent/core/common';\n\nimport { StepState } from '../nav-step/nav-step.component';\n\nexport class TdNavStepHeaderBase {}\n\n/* tslint:disable-next-line */\nexport const _TdNavStepHeaderMixinBase = mixinDisableRipple(mixinDisabled(TdNavStepHeaderBase));\n\n@Component({\n  selector: 'td-nav-step-header',\n  inputs: ['disableRipple'],\n  styleUrls: ['./nav-step-header.component.scss' ],\n  templateUrl: './nav-step-header.component.html',\n})\nexport class TdNavStepHeaderComponent extends _TdNavStepHeaderMixinBase implements ICanDisable, ICanDisableRipple {\n\n  /**\n   * Should display the line after the step\n   */\n  @Input('displayLine') displayLine: boolean;\n\n  /**\n   * Number assigned to [TdNavStepHeaderComponent].\n   */\n  @Input('number') number: number;\n\n  /**\n   * active?: boolean\n   * Sets for active/inactive states on header.\n   */\n  @Input('active') active: boolean;\n\n  /**\n   * state?: StepState or ['none' | 'required' | 'complete']\n   * Sets styles for state of header.\n   * Defaults to [StepState.None | 'none'].\n   */\n  @Input('state') state: StepState = StepState.None;\n\n  /**\n   * Returns 'true' if [state] equals to [StepState.Complete | 'complete'], else 'false'.\n   */\n  isComplete(): boolean {\n    return this.state === StepState.Complete;\n  }\n\n  /**\n   * Returns 'true' if [state] equals to [StepState.Required | 'required'], else 'false'.\n   */\n  isRequired(): boolean {\n    return this.state === StepState.Required;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatRippleModule } from '@angular/material/core';\n\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { TdHorizontalStepperComponent } from './horizontal-nav-stepper/horizontal-nav-stepper.component';\nimport { TdNavStepComponent } from './nav-step/nav-step.component';\nimport { TdNavStepHeaderComponent } from './nav-step-header/nav-step-header.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatRippleModule,\n    PortalModule,\n  ],\n  declarations: [\n    TdHorizontalStepperComponent,\n    TdNavStepComponent,\n    TdNavStepHeaderComponent,\n  ],\n  exports: [\n    TdHorizontalStepperComponent,\n    TdNavStepComponent,\n  ],\n})\nexport class CovalentNavStepperModule {\n\n}\n","import { Type, Injectable, Injector, ÉµReflectionCapabilities, InjectFlags, Optional,\n  SkipSelf, Self, Inject, InjectionToken } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Http, Response, Headers, URLSearchParams } from '@angular/http';\nimport { HttpInterceptorService } from '@covalent/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport type TdHttpMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE' | 'HEAD' | 'PUT' | 'OPTIONS';\n\nexport type TdHttpRESTResponseType = 'arraybuffer' | 'blob' | 'json' | 'text';\n\nexport type TdHttpRESTObserve = 'body' | 'response' | 'events';\n\nexport interface ITdHttpRESTConfig {\n  baseHeaders?: HttpHeaders;\n  baseUrl: string;\n  defaultObserve?: TdHttpRESTObserve;\n  defaultResponseType?: TdHttpRESTResponseType;\n  httpServiceType?: Type<Http | HttpClient | HttpInterceptorService>;\n}\n\nexport interface ITdHttpRESTOptions {\n  headers?: HttpHeaders | {\n    [header: string]: string | string[];\n  };\n  observe?: TdHttpRESTObserve;\n  params?: HttpParams | {\n    [param: string]: string | string[];\n  };\n  responseType?: TdHttpRESTResponseType;\n  reportProgress?: boolean;\n  withCredentials?: boolean;\n}\n\nexport interface ITdHttpRESTOptionsWithBody extends ITdHttpRESTOptions {\n  body?: any;\n}\n\nexport const NOOP_HTTP: Observable<any> = of(undefined);\n\ntype Constructor<T> = new (...args: any[]) => T;\n\n/**\n * DO NOT MODIFY\n * Taken from angular since they dont expose this function\n * This is used internally to inject services from the constructor of the base service using the mixinHttp\n * @internal\n */\nfunction injectArgs(types: (Type<any>| InjectionToken<any>| any[])[], injector: Injector): any[] {\n  const args: any[] = [];\n  for (let i: number = 0; i < types.length; i++) {\n    const arg: any = types[i];\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new Error('Arguments array must have arguments.');\n      }\n      let type: Type<any>|undefined = undefined;\n      let flags: InjectFlags = InjectFlags.Default;\n\n      for (let j: number = 0; j < arg.length; j++) {\n        const meta: any = arg[j];\n        if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n          /* tslint:disable */\n          flags |= InjectFlags.Optional;\n        } else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n          flags |= InjectFlags.SkipSelf;\n        } else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n          flags |= InjectFlags.Self;\n        } else if (meta instanceof Inject) {\n          type = meta.token;\n        } else {\n          type = meta;\n        }\n        /* tslint:enable */\n      }\n\n      args.push(injector.get(type !, flags));\n    } else {\n      args.push(injector.get(arg));\n    }\n  }\n  return args;\n}\n\n/** \n * Mixin to augment a service with http helpers.\n * @internal\n */\nexport function mixinHttp(base: any, config: ITdHttpRESTConfig): Constructor<any> {\n  /**\n   * Internal class used to get an instance of Injector for internal usage plus also\n   * a way to inject services from the constructor of the underlying service\n   * @internal\n   */\n  @Injectable()\n  abstract class HttpInternalClass extends base {\n    constructor(public _injector: Injector) {\n      super(...injectArgs(new ÉµReflectionCapabilities().parameters(base), _injector));\n      this.buildConfig();\n    }\n    abstract buildConfig(): void;\n  }\n  /**\n   * Actuall class being returned with all the hooks for http usage\n   * @internal\n   */\n  return class extends HttpInternalClass {\n    private _baseUrl: string;\n    get baseUrl(): string {\n      return (typeof(this.basePath) === 'string' ?\n        this.basePath.replace(/\\/$/, '') : '') + this._baseUrl;\n    }\n    private _baseHeaders: HttpHeaders;\n    private _defaultObserve?: TdHttpRESTObserve;\n    private _defaultResponseType?: TdHttpRESTResponseType;\n\n    http: HttpClient | HttpInterceptorService | Http;\n\n    /**\n     * Method used to setup the configuration parameters and get an instance of the http service\n     */\n    buildConfig(): void {\n      this.http = this._injector.get(config.httpServiceType || HttpClient);\n      this._baseUrl = config && config.baseUrl ? config.baseUrl.replace(/\\/$/, '') : '';\n      this._baseHeaders = config && config.baseHeaders ? config.baseHeaders : new HttpHeaders();\n      this._defaultObserve = config && config.defaultObserve ? config.defaultObserve : 'body';\n      this._defaultResponseType = config && config.defaultResponseType ? config.defaultResponseType : 'json';\n    }\n\n    /**\n     * Method used to build the default headers using the base headers\n     */\n    buildHeaders(): HttpHeaders {\n      let headersObj: {[key: string]: any} = {};\n      this._baseHeaders.keys().forEach((key: any) => {\n        headersObj[key] = this._baseHeaders.get(key);\n      });\n      return new HttpHeaders(headersObj);\n    }\n\n    /* tslint:disable-next-line */\n    buildRequest<Response>(method: 'POST' | 'PUT' | 'PATCH', url: string, options?: ITdHttpRESTOptionsWithBody): Observable<Response>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: 'POST' | 'PUT' | 'PATCH', url: string, options?: ITdHttpRESTOptionsWithBody): Observable<HttpResponse>;\n    /* tslint:disable-next-line */\n    buildRequest<Response>(method: 'GET' | 'DELETE', url: string, options?: ITdHttpRESTOptions): Observable<Response>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: 'GET' | 'DELETE', url: string, options?: ITdHttpRESTOptions): Observable<HttpResponse>;\n    /* tslint:disable-next-line */\n    buildRequest<Response>(method: TdHttpMethod, url: string, options?: ITdHttpRESTOptionsWithBody): Observable<Response>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: TdHttpMethod, url: string, options?: ITdHttpRESTOptionsWithBody): Observable<HttpResponse> {\n      return this._buildRequest(method, url, options);\n    }\n\n    /**\n     * Method used to build the request depending on the `http` service and TdHttpMethod\n     */\n    private _buildRequest(method: TdHttpMethod, url: string, options: ITdHttpRESTOptionsWithBody = {}): Observable<any> {\n      if (!options.responseType) {\n        options.responseType = this._defaultResponseType;\n      }\n      if (!options.observe) {\n        options.observe = this._defaultObserve;\n      }\n      if (!options.headers) {\n        options.headers = this.buildHeaders();\n      } else {\n        let headers: HttpHeaders = this.buildHeaders();\n        if (options.headers instanceof HttpHeaders) {\n          (<HttpHeaders>options.headers).keys().forEach((key: any) => {\n            headers = headers.set(key, (<HttpHeaders>options.headers).get(key));\n          });\n        } else {\n          for (let key in options.headers) {\n            headers = headers.set(key, <any>options.headers[key]);\n          }\n        }\n        options.headers = headers;\n      }\n      if (this.http instanceof HttpInterceptorService || this.http instanceof Http) {\n        let headers: Headers = new Headers();\n        (<HttpHeaders>options.headers).keys().forEach((key: any) => {\n          headers.set(key, (<HttpHeaders>options.headers).get(key));\n        });\n        let params: URLSearchParams = new URLSearchParams();\n        if (options.params) {\n          if (options.params instanceof HttpParams) {\n            options.params.keys().forEach((key: string) => {\n              params.set(key, (<HttpParams>options.params).get(key));\n            });\n          } else {\n            for (let key in options.params) {\n              params.set(key, <any>options.params[key]);\n            }\n          }\n        }\n        let observable: Observable<Response> = (<HttpInterceptorService>this.http).request(url, {\n          headers: headers,\n          method: method,\n          body: options.body ? options.body : undefined,\n          params: params,\n        });\n        if (options.observe === 'body') {\n          if (options.responseType === 'json') {\n            return <any>observable.pipe(\n              map((response: Response) => response.json()),\n            );\n          } else if (options.responseType === 'text') {\n            return <any>observable.pipe(\n              map((response: Response) => response.text()),\n            );\n          } else if (options.responseType === 'blob') {\n            return <any>observable.pipe(\n              map((response: Response) => response.blob()),\n            );\n          } else if (options.responseType === 'arraybuffer') {\n            return <any>observable.pipe(\n              map((response: Response) => response.arrayBuffer()),\n            );\n          }\n        } else if (options.observe === 'events') {\n          throw Error('\"events\" not suppported in @angular/http');\n        }\n        return observable;\n      } else {\n        return (<HttpClient>this.http).request(method, url, options);\n      }\n    }\n  };\n}\n","declare const Reflect: any;\nexport type TdParamType = 'param' | 'response' | 'body' | 'queryParams';\n\nexport const tdHttpRESTParam: Symbol = Symbol('TdHttpRESTParam');\n\n/**\n * Abstract implementation of the http param decorator\n * @internal\n */\nexport function TdAbstractParam(type: TdParamType, param?: string): Function {\n  return function (target: Object, propertyKey: string | symbol, parameterIndex: number): void {\n    let parameters: { index: number, param: string, type: TdParamType }[] = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyKey) || [];\n    parameters.push({\n      index: parameterIndex,\n      param: param,\n      type: type,\n    });\n    Reflect.defineMetadata(tdHttpRESTParam, parameters, target, propertyKey);\n  };\n}\n","import { HttpParams } from '@angular/common/http';\n\nimport { TdHttpMethod, ITdHttpRESTOptions, ITdHttpRESTOptionsWithBody, NOOP_HTTP } from '../../http.mixin';\nimport { TdParamType, tdHttpRESTParam } from '../params/abstract-param.decorator';\n\ndeclare const Reflect: any;\n\n/**\n * Method used to copy parameters from an array or HttpParams object\n * into a centrilized HttpParams object\n * @internal\n */\nexport function parseParams(target: HttpParams, source: HttpParams | {[key: string]: string | string[]}): HttpParams {\n  let queryParams: HttpParams = target;\n  if (source instanceof HttpParams) {\n    source.keys().forEach((key: string) => {\n      // skip if value is undefined\n      if ((<HttpParams>source).get(key) !== undefined) {\n        queryParams = queryParams.set(key, (<HttpParams>source).get(key));\n      }\n    });\n  } else {\n    for (let key in source) {\n      // skip if value is undefined\n      if (<any>source[key] !== undefined) {\n        queryParams = queryParams.set(key, <any>source[key]);\n      }\n    }\n  }\n  return queryParams;\n}\n\n/**\n * Abstract implementation of the http method decorator\n * @internal\n */\nexport function TdAbstractMethod(config: {\n  method: TdHttpMethod,\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return function (target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>): any {\n    let wrappedFunction: Function = descriptor.value;\n    // replace method call with our own and proxy it\n    descriptor.value = function (): any {\n      try {\n        let replacedPath: string = config.path;\n        let parameters: { index: number, param: string, type: TdParamType }[] = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyName);\n        let newArgs: any[] = [];\n        let body: any;\n        let queryParams: HttpParams = new HttpParams();\n        if (parameters) {\n          // map parameters and see which type they are to act on them\n          for (let parameter of parameters) {\n            if (parameter.type === 'param') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              replacedPath = replacedPath.replace(':' + parameter.param, arguments[parameter.index]);\n            } else if (parameter.type === 'body') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              body = arguments[parameter.index];\n            } else if (parameter.type === 'queryParams') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              let qParams: HttpParams | {[key: string]: string | string[]} = arguments[parameter.index];\n              if (config.options && config.options.params) {\n                queryParams = parseParams(queryParams, config.options.params);\n              }\n              if (qParams) {\n                queryParams = parseParams(queryParams, qParams);\n              }\n            }\n          }\n        }\n        // tslint:disable-next-line\n        let url: string = this.baseUrl + replacedPath;\n        let options: ITdHttpRESTOptionsWithBody = Object.assign({}, config.options, {\n          body: body,\n          params: queryParams,\n        });\n        // tslint:disable-next-line\n        let request: any = this.buildRequest(config.method, url, options);\n        if (parameters) {\n          // see which one was the response parameter so we can set the request observable\n          for (let parameter of parameters) {\n            if (parameter.type === 'response') {\n              newArgs[parameter.index] = request;\n            }\n          }\n        }\n        // tslint:disable-next-line\n        let response: any = wrappedFunction.apply(this, newArgs);\n        // if the response is NOOP_HTTP or undefined, then we return the request as it is\n        // else we return the response from the inner function\n        if (response === NOOP_HTTP || response === undefined) {\n          return request;\n        } else {\n          return response;\n        }\n      } catch (error) {\n        // tslint:disable-next-line\n        console.error(error);\n      }\n    };\n  };\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds GET request capabilities to a method\n */\nexport function GET(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'GET',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds POST request capabilities to a method\n */\nexport function POST(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'POST',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds PATCH request capabilities to a method\n */\nexport function PATCH(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'PATCH',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds PUT request capabilities to a method\n */\nexport function PUT(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'PUT',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds DELETE request capabilities to a method\n */\nexport function DELETE(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'DELETE',\n  }, config));\n}\n","import { mixinHttp, ITdHttpRESTConfig } from '../../http.mixin';\n\n/**\n * Decorator used to give a service http capabilities\n */\nexport function TdHttp(config: ITdHttpRESTConfig): Function {\n  return function <T extends { new(...args: any[]): {} }>(constructor: any): any {\n    return class extends mixinHttp(constructor, config) {\n     \n    };\n  };\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is an http parameter in a method\n */\nexport function TdParam(param: string): Function {\n  return TdAbstractParam('param', param);\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http body in a method\n */\nexport function TdBody(): Function {\n  return TdAbstractParam('body');\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http response in a method\n */\nexport function TdResponse(): Function {\n  return TdAbstractParam('response');\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http query parameters in a method\n */\nexport function TdQueryParams(): Function {\n  return TdAbstractParam('queryParams');\n}\n"],"names":[],"mappings":"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"}
