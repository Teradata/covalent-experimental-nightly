{"version":3,"file":"covalent-experimental-nav-stepper.js.map","sources":["ng://@covalent/experimental/nav-stepper/nav-step/nav-step.component.ts","ng://@covalent/experimental/nav-stepper/horizontal-nav-stepper/horizontal-nav-stepper.component.ts","ng://@covalent/experimental/nav-stepper/nav-step-header/nav-step-header.component.ts","ng://@covalent/experimental/nav-stepper/nav-stepper.module.ts"],"sourcesContent":["import { Component, ElementRef, HostBinding, AfterViewInit, OnInit, Renderer2,\n         ChangeDetectionStrategy, ChangeDetectorRef, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\nexport enum StepState {\n  None = 'none',\n  Required = 'required',\n  Complete = 'complete',\n}\n\n@Component({\n  selector: 'td-nav-step, a[td-nav-step]',\n  styleUrls: ['./nav-step.component.scss'],\n  templateUrl: './nav-step.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdNavStepComponent implements AfterViewInit, OnInit {\n\n  private _displayStep: boolean = true;\n  private _displayLine: boolean = true;\n  private _width: number = 0;\n  private _active: boolean = false;\n\n  // Number to display in step header\n  number: number;\n\n  /**\n   * routerLink?: string\n   * routerLink to navigate to\n   * Defaults to empty\n   */\n  @Input('routerLink') routerLink: string;\n\n  /**\n   * state?: StepState\n   * state of step\n   * Defaults to none\n   */\n  @Input('state') state: StepState = StepState.None;\n\n  /**\n   * sublabel?: string\n   * Sublabel to display in step header\n   * Defaults to empty\n   */\n  @Input('sublabel') sublabel: string;\n\n  constructor(private _elementRef: ElementRef,\n    private router: Router,\n    private _renderer: Renderer2,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'mat-button');\n  }\n\n  isRequired(): boolean {\n    return true;\n  }\n\n  isComplete(): boolean {\n    return true;\n  }\n\n  get displayStep(): boolean {\n    return this._displayStep;\n  }\n\n  /**\n   * Whether to display the step or not\n   */\n  set displayStep(shouldDisplay: boolean) {\n    this._displayStep = shouldDisplay;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get displayLine(): boolean {\n    return this._displayLine;\n  }\n\n  /**\n   * Whether to display the step or not\n   */\n  set displayLine(shouldDisplay: boolean) {\n    this._displayLine = shouldDisplay;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Whether step is active\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * Width of the DOM element of the step\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Gets the display style of the crumb\n   */\n  @HostBinding('style.display')\n  get displayBinding(): string {\n    // Set the display to none on the component, just in case the end user is hiding\n    // and showing them instead of the component doing itself for reasons like responsive\n    return this._displayStep ? undefined : 'none';\n  }\n\n  ngAfterViewInit(): void {\n    // set the width from the actual rendered DOM element\n    Promise.resolve().then(() => {\n      this._width = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().width;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnInit(): void {\n    // Set this step to active if the step route and active route are the same\n    if (this.router.url === this.routerLink) {\n      this._active = true;\n    }\n  }\n\n}\n","import { Component, ContentChildren, QueryList, OnInit, OnDestroy, ChangeDetectionStrategy, \n         AfterContentInit, DoCheck, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { Subscription, Subject, fromEvent, merge } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nimport { TdNavStepComponent } from '../nav-step/nav-step.component';\n\n@Component({\n  selector: 'td-horizontal-nav-stepper',\n  styleUrls: ['./horizontal-nav-stepper.component.scss'],\n  templateUrl: './horizontal-nav-stepper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdHorizontalStepperComponent implements OnInit, DoCheck, AfterContentInit, OnDestroy {\n\n  private _resizeSubscription: Subscription = Subscription.EMPTY;\n  private _widthSubject: Subject<number> = new Subject<number>();\n  private _resizing: boolean = false;\n  private _showLeftArrow: boolean = false;\n  private _showRightArrow: boolean = false;\n  private _leftHidden: number = 0;\n  private _rightHidden: number = 0;\n\n  // all the sub components, which are the individual steps\n  @ContentChildren(TdNavStepComponent) _steps: QueryList<TdNavStepComponent>;\n  // the list of hidden steps not shown right now (responsive)\n  hiddenSteps: TdNavStepComponent[] = new Array();\n\n  constructor(private _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this._resizeSubscription = merge(\n      fromEvent(window, 'resize').pipe(\n        debounceTime(10),\n      ),\n      this._widthSubject.asObservable().pipe(\n        distinctUntilChanged(),\n      ),\n    ).subscribe(() => {\n      if (!this._resizing) {\n        this._resizing = true;\n        setTimeout(() => {\n          this.displayWidthAvailableSteps();\n          this._resizing = false;\n          this._changeDetectorRef.markForCheck();\n        }, 100);\n      }\n    });\n  }\n\n  ngDoCheck(): void {\n    if (this._elementRef && this._elementRef.nativeElement) {\n      this._widthSubject.next(this.nativeElementWidth);\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.setStepSettings();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /*\n  * Current width of the element container\n  */\n  get nativeElementWidth(): number {\n    let element: HTMLElement = (<HTMLElement>this._elementRef.nativeElement);\n\n    // Need to take into account border, margin and padding that might be around all the crumbs\n    let style: CSSStyleDeclaration = window.getComputedStyle(element);\n    let borderLeft: number = parseInt(style.borderLeft, 10);\n    let borderRight: number = parseInt(style.borderRight, 10);\n    let marginLeft: number = parseInt(style.marginLeft, 10);\n    let marginRight: number = parseInt(style.marginRight, 10);\n    let paddingLeft: number = parseInt(style.paddingLeft, 10);\n    let paddingRight: number = parseInt(style.paddingRight, 10);\n\n    return element.getBoundingClientRect().width - borderLeft - borderRight - marginLeft - marginRight - paddingLeft - paddingRight;\n  }\n\n  /**\n   * The total count of individual steps\n   */\n  get count(): number {\n    return this._steps ? this._steps.length : 0;\n  }\n\n  /**\n   * Should we show the left Arrow\n   */\n  get showLeftArrow(): boolean {\n    return this._showLeftArrow;\n  }\n\n  /**\n   * Should we show the right Arrow\n   */\n  get showRightArrow(): boolean {\n    return this._showRightArrow;\n  }\n\n  public showHiddenLeftStep(): void {\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    // show the left one\n    stepsArray[this._leftHidden - 1].displayStep = true;\n    this.hiddenSteps.splice(this._leftHidden - 1, 1);\n    this._leftHidden--;\n    // If no more hidden steps then hide left arrow\n    if (this._leftHidden === 0) {\n      this._showLeftArrow = false;\n    }\n\n    // hide the right one\n    stepsArray[stepsArray.length - (this._rightHidden + 1)].displayStep = false;\n    stepsArray[stepsArray.length - (this._rightHidden + 2)].displayLine = false;\n    this.hiddenSteps.push(stepsArray[stepsArray.length - 1]);\n    this._rightHidden++;\n\n    this._showRightArrow = true;\n  }\n\n  public showHiddenRightStep(): void {\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    // show the right one\n    stepsArray[stepsArray.length - this._rightHidden].displayStep = true;\n    stepsArray[stepsArray.length - (this._rightHidden + 1)].displayLine = true;\n    this.hiddenSteps.pop();\n    this._rightHidden--;\n    // If no more hidden steps then hide right arrow\n    if (this._rightHidden === 0) {\n      this._showRightArrow = false;\n    }\n\n    // hide the left one\n    stepsArray[this._leftHidden].displayStep = false;\n    this.hiddenSteps.push(stepsArray[this._leftHidden]);\n    this._leftHidden++;\n\n    this._showLeftArrow = true;\n  }\n\n  /**\n   * Set the step line separators and display numbers\n   */\n  private setStepSettings(): void {\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    if (stepsArray.length > 0) {\n      // don't show the icon on the last breadcrumb\n      stepsArray[stepsArray.length - 1].displayLine = false;\n    }\n    // set the index number of the step so can display that number in circle\n    stepsArray.forEach((step: TdNavStepComponent, index: number) => {\n      step.number = index + 1;\n    });\n  }\n\n  private displayWidthAvailableSteps(): void {\n    let curTotStepWidth: number = 0;\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    // calculate the current width of the shown steps\n    for (let i: number = this.hiddenSteps.length; i < stepsArray.length; i++) {\n      curTotStepWidth += stepsArray[i].width;\n    }\n    // get the active step index\n    let activeIndex: number = stepsArray.findIndex((step: TdNavStepComponent) => {\n      return step.active === true;\n    });\n    // hide the first step if window size is smaller than all the step sizes\n    if (this.nativeElementWidth < curTotStepWidth) {\n      // determine if the active step is in the first or second half of the list\n      // and check that all the left ones aren't already hidden (2nd check after && does that)\n      // and hide on the opposite side of that\n      if ((activeIndex >= stepsArray.length / 2) && (this._leftHidden < activeIndex)) {\n        // left\n        this._showRightArrow = false;\n        this._showLeftArrow = true;\n        this._leftHidden++;\n        stepsArray[this._leftHidden - 1].displayStep = false;\n        this.hiddenSteps.push(stepsArray[this.hiddenSteps.length]);\n      // Check to see that all the possible ones on the right aren't already hidden\n      } else if (this._rightHidden < stepsArray.length - activeIndex) {\n        // right\n        this._showRightArrow = true;\n        this._showLeftArrow = false;\n        this._rightHidden++;\n        stepsArray[stepsArray.length - this._rightHidden].displayStep = false;\n        this.hiddenSteps.push(stepsArray[stepsArray.length - this._rightHidden]);\n      }\n      this.displayWidthAvailableSteps();\n    } else {\n      // loop over all the hidden steps and see if adding them back in will\n      // fit in the current window size\n      let totalHidden: number = this.hiddenSteps.length - 1;\n      for (let i: number = totalHidden; i >= 0; i--) {\n        let hiddenStepWidth: number = stepsArray[i].width;\n        if ((curTotStepWidth + hiddenStepWidth) < this.nativeElementWidth) {\n          // Determine if the active step is in the first or second half of the list\n          // and if its right and there are hidden left steps\n          // or if it left and there are no right hidden ones and some left hidden (using arrows can cause it to be unbalanced)\n          // then show the hidden ones on the left\n          if ((activeIndex >= stepsArray.length / 2 && this._leftHidden > 0) || \n              (activeIndex < stepsArray.length / 2 && this._rightHidden === 0 && this._leftHidden > 0)) {\n            // left\n            stepsArray[this._leftHidden - 1].displayStep = true;\n            this.hiddenSteps.shift();\n            this._leftHidden--;\n            // If no more hidden steps then hide left arrow\n            if (this._leftHidden === 0) {\n              this._showLeftArrow = false;\n            }\n          // Check if there are any on the right hidden and show them\n          } else if (this._rightHidden > 0) {\n            // right\n            stepsArray[stepsArray.length - this._rightHidden].displayStep = true;\n            this.hiddenSteps.pop();\n            this._rightHidden--;\n            // If no more hidden steps then hide right arrow\n            if (this._rightHidden === 0) {\n              this._showRightArrow = false;\n            }\n          }\n          // recalculate the total width based on adding back in a step\n          let newTotStepWidth: number = 0;\n          for (let j: number = this.hiddenSteps.length; j < stepsArray.length; j++) {\n            newTotStepWidth += stepsArray[j].width;\n          }\n          curTotStepWidth = newTotStepWidth;\n        } else if (i === totalHidden) {\n          // need to break out of loop here because the first in the hidden\n          // list can't fit in current window size\n          break;\n        }\n      }\n    }\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ICanDisable, mixinDisabled, ICanDisableRipple, mixinDisableRipple } from '@covalent/core/common';\n\nimport { StepState } from '../nav-step/nav-step.component';\n\nexport class TdNavStepHeaderBase {}\n\n/* tslint:disable-next-line */\nexport const _TdNavStepHeaderMixinBase = mixinDisableRipple(mixinDisabled(TdNavStepHeaderBase));\n\n@Component({\n  selector: 'td-nav-step-header',\n  inputs: ['disableRipple'],\n  styleUrls: ['./nav-step-header.component.scss' ],\n  templateUrl: './nav-step-header.component.html',\n})\nexport class TdNavStepHeaderComponent extends _TdNavStepHeaderMixinBase implements ICanDisable, ICanDisableRipple {\n\n  /**\n   * Should display the line after the step\n   */\n  @Input('displayLine') displayLine: boolean;\n\n  /**\n   * Number assigned to [TdNavStepHeaderComponent].\n   */\n  @Input('number') number: number;\n\n  /**\n   * active?: boolean\n   * Sets for active/inactive states on header.\n   */\n  @Input('active') active: boolean;\n\n  /**\n   * state?: StepState or ['none' | 'required' | 'complete']\n   * Sets styles for state of header.\n   * Defaults to [StepState.None | 'none'].\n   */\n  @Input('state') state: StepState = StepState.None;\n\n  /**\n   * Returns 'true' if [state] equals to [StepState.Complete | 'complete'], else 'false'.\n   */\n  isComplete(): boolean {\n    return this.state === StepState.Complete;\n  }\n\n  /**\n   * Returns 'true' if [state] equals to [StepState.Required | 'required'], else 'false'.\n   */\n  isRequired(): boolean {\n    return this.state === StepState.Required;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatRippleModule } from '@angular/material/core';\n\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { TdHorizontalStepperComponent } from './horizontal-nav-stepper/horizontal-nav-stepper.component';\nimport { TdNavStepComponent } from './nav-step/nav-step.component';\nimport { TdNavStepHeaderComponent } from './nav-step-header/nav-step-header.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatRippleModule,\n    PortalModule,\n  ],\n  declarations: [\n    TdHorizontalStepperComponent,\n    TdNavStepComponent,\n    TdNavStepHeaderComponent,\n  ],\n  exports: [\n    TdHorizontalStepperComponent,\n    TdNavStepComponent,\n  ],\n})\nexport class CovalentNavStepperModule {\n\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
