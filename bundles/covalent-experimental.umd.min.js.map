{"version":3,"sources":["ng://@covalent/experimental/template-rename-me-experiment-module/rename-me.component.ts","ng://@covalent/experimental/template-rename-me-experiment-module/rename-me.module.ts","ng://@covalent/experimental/nav-stepper/nav-step/nav-step.component.ts","ng://@covalent/experimental/nav-stepper/horizontal-nav-stepper/horizontal-nav-stepper.component.ts","node_modules/tslib/tslib.es6.js","ng://@covalent/experimental/nav-stepper/nav-step-header/nav-step-header.component.ts","ng://@covalent/experimental/nav-stepper/nav-stepper.module.ts","ng://@covalent/experimental/http/http.mixin.ts","ng://@covalent/experimental/http/actions/params/abstract-param.decorator.ts","ng://@covalent/experimental/http/actions/methods/abstract-method.decorator.ts","ng://@covalent/experimental/http/actions/methods/get.decorator.ts","ng://@covalent/experimental/http/actions/methods/post.decorator.ts","ng://@covalent/experimental/http/actions/methods/patch.decorator.ts","ng://@covalent/experimental/http/actions/methods/put.decorator.ts","ng://@covalent/experimental/http/actions/methods/delete.decorator.ts","ng://@covalent/experimental/http/actions/class/http.decorator.ts","ng://@covalent/experimental/http/actions/params/param.decorator.ts","ng://@covalent/experimental/http/actions/params/body.decorator.ts","ng://@covalent/experimental/http/actions/params/response.decorator.ts","ng://@covalent/experimental/http/actions/params/query-params.decorator.ts"],"names":["TdRenameMeComponent","Component","args","selector","template","CovalentRenameMeModule","NgModule","imports","CommonModule","declarations","exports","TdNavStepComponent","_elementRef","router","_renderer","_changeDetectorRef","this","_displayStep","_displayLine","_width","_active","state","StepState","addClass","nativeElement","prototype","isRequired","isComplete","Object","defineProperty","shouldDisplay","markForCheck","undefined","ngAfterViewInit","_this","Promise","resolve","then","getBoundingClientRect","width","ngOnInit","url","routerLink","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Router","Renderer2","ChangeDetectorRef","Input","HostBinding","TdHorizontalStepperComponent","_resizeSubscription","Subscription","EMPTY","_widthSubject","Subject","_resizing","_showLeftArrow","_showRightArrow","_leftHidden","_rightHidden","hiddenSteps","Array","merge","fromEvent","window","pipe","debounceTime","asObservable","distinctUntilChanged","subscribe","setTimeout","displayWidthAvailableSteps","ngDoCheck","next","nativeElementWidth","ngAfterContentInit","setStepSettings","ngOnDestroy","unsubscribe","element","style","getComputedStyle","borderLeft","parseInt","borderRight","marginLeft","marginRight","paddingLeft","paddingRight","_steps","length","showHiddenLeftStep","stepsArray","toArray","displayStep","splice","displayLine","push","showHiddenRightStep","pop","forEach","step","index","number","curTotStepWidth","i","activeIndex","findIndex","active","totalHidden","shift","newTotStepWidth","j","ContentChildren","extendStatics","d","b","setPrototypeOf","__proto__","p","hasOwnProperty","__extends","__","constructor","create","__values","o","m","Symbol","iterator","call","value","done","__read","n","r","e","ar","error","TdNavStepHeaderBase","_TdNavStepHeaderMixinBase","mixinDisableRipple","mixinDisabled","TdNavStepHeaderComponent","_super","apply","arguments","tslib_1.__extends","inputs","CovalentNavStepperModule","MatIconModule","MatRippleModule","PortalModule","NOOP_HTTP","of","mixinHttp","base","config","class_1","basePath","replace","_baseUrl","buildConfig","http","_injector","get","httpServiceType","HttpClient","baseUrl","_baseHeaders","baseHeaders","HttpHeaders","_defaultObserve","defaultObserve","_defaultResponseType","defaultResponseType","buildHeaders","headersObj","keys","key","buildRequest","method","options","_buildRequest","responseType","observe","headers","headers_1","set","HttpInterceptorService","Http","headers_2","Headers","params_1","URLSearchParams","params","HttpParams","observable","request","body","map","response","json","text","blob","arrayBuffer","Error","HttpInternalClass","__spread","concat","injectArgs","types","injector","arg","isArray","type","flags","meta","Optional","ngMetadataName","SkipSelf","Self","Inject","token","ÉµReflectionCapabilities","parameters","Injectable","Injector","tdHttpRESTParam","TdAbstractParam","param","target","propertyKey","parameterIndex","Reflect","getOwnMetadata","defineMetadata","parseParams","source","queryParams","TdAbstractMethod","propertyName","descriptor","wrappedFunction","replacedPath","path","newArgs","parameters_1","tslib_1.__values","parameters_1_1","parameter","qParams","assign","parameters_2","parameters_2_1","console","GET","POST","PATCH","PUT","DELETE","TdHttp","TdParam","TdBody","TdResponse","TdQueryParams"],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'td-renameMe',\n  styleUrls: ['./rename-me.component.scss'],\n  templateUrl: './rename-me.component.html',\n})\nexport class TdRenameMeComponent {\n\n  constructor() {\n    // stub\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TdRenameMeComponent } from './rename-me.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TdRenameMeComponent,\n  ],\n  exports: [\n    TdRenameMeComponent,\n  ],\n})\nexport class CovalentRenameMeModule {\n\n}\n","import { Component, ElementRef, HostBinding, AfterViewInit, OnInit, Renderer2,\n         ChangeDetectionStrategy, ChangeDetectorRef, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\nexport enum StepState {\n  None = 'none',\n  Required = 'required',\n  Complete = 'complete',\n}\n\n@Component({\n  selector: 'td-nav-step, a[td-nav-step]',\n  styleUrls: ['./nav-step.component.scss'],\n  templateUrl: './nav-step.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdNavStepComponent implements AfterViewInit, OnInit {\n\n  private _displayStep: boolean = true;\n  private _displayLine: boolean = true;\n  private _width: number = 0;\n  private _active: boolean = false;\n\n  // Number to display in step header\n  number: number;\n\n  /**\n   * routerLink?: string\n   * routerLink to navigate to\n   * Defaults to empty\n   */\n  @Input('routerLink') routerLink: string;\n\n  /**\n   * state?: StepState\n   * state of step\n   * Defaults to none\n   */\n  @Input('state') state: StepState = StepState.None;\n\n  /**\n   * sublabel?: string\n   * Sublabel to display in step header\n   * Defaults to empty\n   */\n  @Input('sublabel') sublabel: string;\n\n  constructor(private _elementRef: ElementRef,\n    private router: Router,\n    private _renderer: Renderer2,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'mat-button');\n  }\n\n  isRequired(): boolean {\n    return true;\n  }\n\n  isComplete(): boolean {\n    return true;\n  }\n\n  get displayStep(): boolean {\n    return this._displayStep;\n  }\n\n  /**\n   * Whether to display the step or not\n   */\n  set displayStep(shouldDisplay: boolean) {\n    this._displayStep = shouldDisplay;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get displayLine(): boolean {\n    return this._displayLine;\n  }\n\n  /**\n   * Whether to display the step or not\n   */\n  set displayLine(shouldDisplay: boolean) {\n    this._displayLine = shouldDisplay;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Whether step is active\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * Width of the DOM element of the step\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Gets the display style of the crumb\n   */\n  @HostBinding('style.display')\n  get displayBinding(): string {\n    // Set the display to none on the component, just in case the end user is hiding\n    // and showing them instead of the component doing itself for reasons like responsive\n    return this._displayStep ? undefined : 'none';\n  }\n\n  ngAfterViewInit(): void {\n    // set the width from the actual rendered DOM element\n    Promise.resolve().then(() => {\n      this._width = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().width;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnInit(): void {\n    // Set this step to active if the step route and active route are the same\n    if (this.router.url === this.routerLink) {\n      this._active = true;\n    }\n  }\n\n}\n","import { Component, ContentChildren, QueryList, OnInit, OnDestroy, ChangeDetectionStrategy, \n         AfterContentInit, DoCheck, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { Subscription, Subject, fromEvent, merge } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nimport { TdNavStepComponent } from '../nav-step/nav-step.component';\n\n@Component({\n  selector: 'td-horizontal-nav-stepper',\n  styleUrls: ['./horizontal-nav-stepper.component.scss'],\n  templateUrl: './horizontal-nav-stepper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdHorizontalStepperComponent implements OnInit, DoCheck, AfterContentInit, OnDestroy {\n\n  private _resizeSubscription: Subscription = Subscription.EMPTY;\n  private _widthSubject: Subject<number> = new Subject<number>();\n  private _resizing: boolean = false;\n  private _showLeftArrow: boolean = false;\n  private _showRightArrow: boolean = false;\n  private _leftHidden: number = 0;\n  private _rightHidden: number = 0;\n\n  // all the sub components, which are the individual steps\n  @ContentChildren(TdNavStepComponent) _steps: QueryList<TdNavStepComponent>;\n  // the list of hidden steps not shown right now (responsive)\n  hiddenSteps: TdNavStepComponent[] = new Array();\n\n  constructor(private _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this._resizeSubscription = merge(\n      fromEvent(window, 'resize').pipe(\n        debounceTime(10),\n      ),\n      this._widthSubject.asObservable().pipe(\n        distinctUntilChanged(),\n      ),\n    ).subscribe(() => {\n      if (!this._resizing) {\n        this._resizing = true;\n        setTimeout(() => {\n          this.displayWidthAvailableSteps();\n          this._resizing = false;\n          this._changeDetectorRef.markForCheck();\n        }, 100);\n      }\n    });\n  }\n\n  ngDoCheck(): void {\n    if (this._elementRef && this._elementRef.nativeElement) {\n      this._widthSubject.next(this.nativeElementWidth);\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.setStepSettings();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /*\n  * Current width of the element container\n  */\n  get nativeElementWidth(): number {\n    let element: HTMLElement = (<HTMLElement>this._elementRef.nativeElement);\n\n    // Need to take into account border, margin and padding that might be around all the crumbs\n    let style: CSSStyleDeclaration = window.getComputedStyle(element);\n    let borderLeft: number = parseInt(style.borderLeft, 10);\n    let borderRight: number = parseInt(style.borderRight, 10);\n    let marginLeft: number = parseInt(style.marginLeft, 10);\n    let marginRight: number = parseInt(style.marginRight, 10);\n    let paddingLeft: number = parseInt(style.paddingLeft, 10);\n    let paddingRight: number = parseInt(style.paddingRight, 10);\n\n    return element.getBoundingClientRect().width - borderLeft - borderRight - marginLeft - marginRight - paddingLeft - paddingRight;\n  }\n\n  /**\n   * The total count of individual steps\n   */\n  get count(): number {\n    return this._steps ? this._steps.length : 0;\n  }\n\n  /**\n   * Should we show the left Arrow\n   */\n  get showLeftArrow(): boolean {\n    return this._showLeftArrow;\n  }\n\n  /**\n   * Should we show the right Arrow\n   */\n  get showRightArrow(): boolean {\n    return this._showRightArrow;\n  }\n\n  public showHiddenLeftStep(): void {\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    // show the left one\n    stepsArray[this._leftHidden - 1].displayStep = true;\n    this.hiddenSteps.splice(this._leftHidden - 1, 1);\n    this._leftHidden--;\n    // If no more hidden steps then hide left arrow\n    if (this._leftHidden === 0) {\n      this._showLeftArrow = false;\n    }\n\n    // hide the right one\n    stepsArray[stepsArray.length - (this._rightHidden + 1)].displayStep = false;\n    stepsArray[stepsArray.length - (this._rightHidden + 2)].displayLine = false;\n    this.hiddenSteps.push(stepsArray[stepsArray.length - 1]);\n    this._rightHidden++;\n\n    this._showRightArrow = true;\n  }\n\n  public showHiddenRightStep(): void {\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    // show the right one\n    stepsArray[stepsArray.length - this._rightHidden].displayStep = true;\n    stepsArray[stepsArray.length - (this._rightHidden + 1)].displayLine = true;\n    this.hiddenSteps.pop();\n    this._rightHidden--;\n    // If no more hidden steps then hide right arrow\n    if (this._rightHidden === 0) {\n      this._showRightArrow = false;\n    }\n\n    // hide the left one\n    stepsArray[this._leftHidden].displayStep = false;\n    this.hiddenSteps.push(stepsArray[this._leftHidden]);\n    this._leftHidden++;\n\n    this._showLeftArrow = true;\n  }\n\n  /**\n   * Set the step line separators and display numbers\n   */\n  private setStepSettings(): void {\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    if (stepsArray.length > 0) {\n      // don't show the icon on the last breadcrumb\n      stepsArray[stepsArray.length - 1].displayLine = false;\n    }\n    // set the index number of the step so can display that number in circle\n    stepsArray.forEach((step: TdNavStepComponent, index: number) => {\n      step.number = index + 1;\n    });\n  }\n\n  private displayWidthAvailableSteps(): void {\n    let curTotStepWidth: number = 0;\n    let stepsArray: TdNavStepComponent[] = this._steps.toArray();\n    // calculate the current width of the shown steps\n    for (let i: number = this.hiddenSteps.length; i < stepsArray.length; i++) {\n      curTotStepWidth += stepsArray[i].width;\n    }\n    // get the active step index\n    let activeIndex: number = stepsArray.findIndex((step: TdNavStepComponent) => {\n      return step.active === true;\n    });\n    // hide the first step if window size is smaller than all the step sizes\n    if (this.nativeElementWidth < curTotStepWidth) {\n      // determine if the active step is in the first or second half of the list\n      // and check that all the left ones aren't already hidden (2nd check after && does that)\n      // and hide on the opposite side of that\n      if ((activeIndex >= stepsArray.length / 2) && (this._leftHidden < activeIndex)) {\n        // left\n        this._showRightArrow = false;\n        this._showLeftArrow = true;\n        this._leftHidden++;\n        stepsArray[this._leftHidden - 1].displayStep = false;\n        this.hiddenSteps.push(stepsArray[this.hiddenSteps.length]);\n      // Check to see that all the possible ones on the right aren't already hidden\n      } else if (this._rightHidden < stepsArray.length - activeIndex) {\n        // right\n        this._showRightArrow = true;\n        this._showLeftArrow = false;\n        this._rightHidden++;\n        stepsArray[stepsArray.length - this._rightHidden].displayStep = false;\n        this.hiddenSteps.push(stepsArray[stepsArray.length - this._rightHidden]);\n      }\n      this.displayWidthAvailableSteps();\n    } else {\n      // loop over all the hidden steps and see if adding them back in will\n      // fit in the current window size\n      let totalHidden: number = this.hiddenSteps.length - 1;\n      for (let i: number = totalHidden; i >= 0; i--) {\n        let hiddenStepWidth: number = stepsArray[i].width;\n        if ((curTotStepWidth + hiddenStepWidth) < this.nativeElementWidth) {\n          // Determine if the active step is in the first or second half of the list\n          // and if its right and there are hidden left steps\n          // or if it left and there are no right hidden ones and some left hidden (using arrows can cause it to be unbalanced)\n          // then show the hidden ones on the left\n          if ((activeIndex >= stepsArray.length / 2 && this._leftHidden > 0) || \n              (activeIndex < stepsArray.length / 2 && this._rightHidden === 0 && this._leftHidden > 0)) {\n            // left\n            stepsArray[this._leftHidden - 1].displayStep = true;\n            this.hiddenSteps.shift();\n            this._leftHidden--;\n            // If no more hidden steps then hide left arrow\n            if (this._leftHidden === 0) {\n              this._showLeftArrow = false;\n            }\n          // Check if there are any on the right hidden and show them\n          } else if (this._rightHidden > 0) {\n            // right\n            stepsArray[stepsArray.length - this._rightHidden].displayStep = true;\n            this.hiddenSteps.pop();\n            this._rightHidden--;\n            // If no more hidden steps then hide right arrow\n            if (this._rightHidden === 0) {\n              this._showRightArrow = false;\n            }\n          }\n          // recalculate the total width based on adding back in a step\n          let newTotStepWidth: number = 0;\n          for (let j: number = this.hiddenSteps.length; j < stepsArray.length; j++) {\n            newTotStepWidth += stepsArray[j].width;\n          }\n          curTotStepWidth = newTotStepWidth;\n        } else if (i === totalHidden) {\n          // need to break out of loop here because the first in the hidden\n          // list can't fit in current window size\n          break;\n        }\n      }\n    }\n  }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Component, Input } from '@angular/core';\n\nimport { ICanDisable, mixinDisabled, ICanDisableRipple, mixinDisableRipple } from '@covalent/core/common';\n\nimport { StepState } from '../nav-step/nav-step.component';\n\nexport class TdNavStepHeaderBase {}\n\n/* tslint:disable-next-line */\nexport const _TdNavStepHeaderMixinBase = mixinDisableRipple(mixinDisabled(TdNavStepHeaderBase));\n\n@Component({\n  selector: 'td-nav-step-header',\n  inputs: ['disableRipple'],\n  styleUrls: ['./nav-step-header.component.scss' ],\n  templateUrl: './nav-step-header.component.html',\n})\nexport class TdNavStepHeaderComponent extends _TdNavStepHeaderMixinBase implements ICanDisable, ICanDisableRipple {\n\n  /**\n   * Should display the line after the step\n   */\n  @Input('displayLine') displayLine: boolean;\n\n  /**\n   * Number assigned to [TdNavStepHeaderComponent].\n   */\n  @Input('number') number: number;\n\n  /**\n   * active?: boolean\n   * Sets for active/inactive states on header.\n   */\n  @Input('active') active: boolean;\n\n  /**\n   * state?: StepState or ['none' | 'required' | 'complete']\n   * Sets styles for state of header.\n   * Defaults to [StepState.None | 'none'].\n   */\n  @Input('state') state: StepState = StepState.None;\n\n  /**\n   * Returns 'true' if [state] equals to [StepState.Complete | 'complete'], else 'false'.\n   */\n  isComplete(): boolean {\n    return this.state === StepState.Complete;\n  }\n\n  /**\n   * Returns 'true' if [state] equals to [StepState.Required | 'required'], else 'false'.\n   */\n  isRequired(): boolean {\n    return this.state === StepState.Required;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatRippleModule } from '@angular/material/core';\n\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { TdHorizontalStepperComponent } from './horizontal-nav-stepper/horizontal-nav-stepper.component';\nimport { TdNavStepComponent } from './nav-step/nav-step.component';\nimport { TdNavStepHeaderComponent } from './nav-step-header/nav-step-header.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatRippleModule,\n    PortalModule,\n  ],\n  declarations: [\n    TdHorizontalStepperComponent,\n    TdNavStepComponent,\n    TdNavStepHeaderComponent,\n  ],\n  exports: [\n    TdHorizontalStepperComponent,\n    TdNavStepComponent,\n  ],\n})\nexport class CovalentNavStepperModule {\n\n}\n","import { Type, Injectable, Injector, ÃÂµReflectionCapabilities, InjectFlags, Optional,\n  SkipSelf, Self, Inject, InjectionToken } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Http, Response, Headers, URLSearchParams } from '@angular/http';\nimport { HttpInterceptorService } from '@covalent/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport type TdHttpMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE' | 'HEAD' | 'PUT' | 'OPTIONS';\n\nexport type TdHttpRESTResponseType = 'arraybuffer' | 'blob' | 'json' | 'text';\n\nexport type TdHttpRESTObserve = 'body' | 'response' | 'events';\n\nexport interface ITdHttpRESTConfig {\n  baseHeaders?: HttpHeaders;\n  baseUrl: string;\n  defaultObserve?: TdHttpRESTObserve;\n  defaultResponseType?: TdHttpRESTResponseType;\n  httpServiceType?: Type<Http | HttpClient | HttpInterceptorService>;\n}\n\nexport interface ITdHttpRESTOptions {\n  headers?: HttpHeaders | {\n    [header: string]: string | string[];\n  };\n  observe?: TdHttpRESTObserve;\n  params?: HttpParams | {\n    [param: string]: string | string[];\n  };\n  responseType?: TdHttpRESTResponseType;\n  reportProgress?: boolean;\n  withCredentials?: boolean;\n}\n\nexport interface ITdHttpRESTOptionsWithBody extends ITdHttpRESTOptions {\n  body?: any;\n}\n\nexport const NOOP_HTTP: Observable<any> = of(undefined);\n\ntype Constructor<T> = new (...args: any[]) => T;\n\n/**\n * DO NOT MODIFY\n * Taken from angular since they dont expose this function\n * This is used internally to inject services from the constructor of the base service using the mixinHttp\n * @internal\n */\nfunction injectArgs(types: (Type<any>| InjectionToken<any>| any[])[], injector: Injector): any[] {\n  const args: any[] = [];\n  for (let i: number = 0; i < types.length; i++) {\n    const arg: any = types[i];\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new Error('Arguments array must have arguments.');\n      }\n      let type: Type<any>|undefined = undefined;\n      let flags: InjectFlags = InjectFlags.Default;\n\n      for (let j: number = 0; j < arg.length; j++) {\n        const meta: any = arg[j];\n        if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n          /* tslint:disable */\n          flags |= InjectFlags.Optional;\n        } else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n          flags |= InjectFlags.SkipSelf;\n        } else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n          flags |= InjectFlags.Self;\n        } else if (meta instanceof Inject) {\n          type = meta.token;\n        } else {\n          type = meta;\n        }\n        /* tslint:enable */\n      }\n\n      args.push(injector.get(type !, flags));\n    } else {\n      args.push(injector.get(arg));\n    }\n  }\n  return args;\n}\n\n/** \n * Mixin to augment a service with http helpers.\n * @internal\n */\nexport function mixinHttp(base: any, config: ITdHttpRESTConfig): Constructor<any> {\n  /**\n   * Internal class used to get an instance of Injector for internal usage plus also\n   * a way to inject services from the constructor of the underlying service\n   * @internal\n   */\n  @Injectable()\n  abstract class HttpInternalClass extends base {\n    constructor(public _injector: Injector) {\n      super(...injectArgs(new ÃÂµReflectionCapabilities().parameters(base), _injector));\n      this.buildConfig();\n    }\n    abstract buildConfig(): void;\n  }\n  /**\n   * Actuall class being returned with all the hooks for http usage\n   * @internal\n   */\n  return class extends HttpInternalClass {\n    private _baseUrl: string;\n    get baseUrl(): string {\n      return (typeof(this.basePath) === 'string' ?\n        this.basePath.replace(/\\/$/, '') : '') + this._baseUrl;\n    }\n    private _baseHeaders: HttpHeaders;\n    private _defaultObserve?: TdHttpRESTObserve;\n    private _defaultResponseType?: TdHttpRESTResponseType;\n\n    http: HttpClient | HttpInterceptorService | Http;\n\n    /**\n     * Method used to setup the configuration parameters and get an instance of the http service\n     */\n    buildConfig(): void {\n      this.http = this._injector.get(config.httpServiceType || HttpClient);\n      this._baseUrl = config && config.baseUrl ? config.baseUrl.replace(/\\/$/, '') : '';\n      this._baseHeaders = config && config.baseHeaders ? config.baseHeaders : new HttpHeaders();\n      this._defaultObserve = config && config.defaultObserve ? config.defaultObserve : 'body';\n      this._defaultResponseType = config && config.defaultResponseType ? config.defaultResponseType : 'json';\n    }\n\n    /**\n     * Method used to build the default headers using the base headers\n     */\n    buildHeaders(): HttpHeaders {\n      let headersObj: {[key: string]: any} = {};\n      this._baseHeaders.keys().forEach((key: any) => {\n        headersObj[key] = this._baseHeaders.get(key);\n      });\n      return new HttpHeaders(headersObj);\n    }\n\n    /* tslint:disable-next-line */\n    buildRequest<Response>(method: 'POST' | 'PUT' | 'PATCH', url: string, options?: ITdHttpRESTOptionsWithBody): Observable<Response>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: 'POST' | 'PUT' | 'PATCH', url: string, options?: ITdHttpRESTOptionsWithBody): Observable<HttpResponse>;\n    /* tslint:disable-next-line */\n    buildRequest<Response>(method: 'GET' | 'DELETE', url: string, options?: ITdHttpRESTOptions): Observable<Response>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: 'GET' | 'DELETE', url: string, options?: ITdHttpRESTOptions): Observable<HttpResponse>;\n    /* tslint:disable-next-line */\n    buildRequest<Response>(method: TdHttpMethod, url: string, options?: ITdHttpRESTOptionsWithBody): Observable<Response>;\n    /* tslint:disable-next-line */\n    buildRequest<HttpResponse>(method: TdHttpMethod, url: string, options?: ITdHttpRESTOptionsWithBody): Observable<HttpResponse> {\n      return this._buildRequest(method, url, options);\n    }\n\n    /**\n     * Method used to build the request depending on the `http` service and TdHttpMethod\n     */\n    private _buildRequest(method: TdHttpMethod, url: string, options: ITdHttpRESTOptionsWithBody = {}): Observable<any> {\n      if (!options.responseType) {\n        options.responseType = this._defaultResponseType;\n      }\n      if (!options.observe) {\n        options.observe = this._defaultObserve;\n      }\n      if (!options.headers) {\n        options.headers = this.buildHeaders();\n      } else {\n        let headers: HttpHeaders = this.buildHeaders();\n        if (options.headers instanceof HttpHeaders) {\n          (<HttpHeaders>options.headers).keys().forEach((key: any) => {\n            headers = headers.set(key, (<HttpHeaders>options.headers).get(key));\n          });\n        } else {\n          for (let key in options.headers) {\n            headers = headers.set(key, <any>options.headers[key]);\n          }\n        }\n        options.headers = headers;\n      }\n      if (this.http instanceof HttpInterceptorService || this.http instanceof Http) {\n        let headers: Headers = new Headers();\n        (<HttpHeaders>options.headers).keys().forEach((key: any) => {\n          headers.set(key, (<HttpHeaders>options.headers).get(key));\n        });\n        let params: URLSearchParams = new URLSearchParams();\n        if (options.params) {\n          if (options.params instanceof HttpParams) {\n            options.params.keys().forEach((key: string) => {\n              params.set(key, (<HttpParams>options.params).get(key));\n            });\n          } else {\n            for (let key in options.params) {\n              params.set(key, <any>options.params[key]);\n            }\n          }\n        }\n        let observable: Observable<Response> = (<HttpInterceptorService>this.http).request(url, {\n          headers: headers,\n          method: method,\n          body: options.body ? options.body : undefined,\n          params: params,\n        });\n        if (options.observe === 'body') {\n          if (options.responseType === 'json') {\n            return <any>observable.pipe(\n              map((response: Response) => response.json()),\n            );\n          } else if (options.responseType === 'text') {\n            return <any>observable.pipe(\n              map((response: Response) => response.text()),\n            );\n          } else if (options.responseType === 'blob') {\n            return <any>observable.pipe(\n              map((response: Response) => response.blob()),\n            );\n          } else if (options.responseType === 'arraybuffer') {\n            return <any>observable.pipe(\n              map((response: Response) => response.arrayBuffer()),\n            );\n          }\n        } else if (options.observe === 'events') {\n          throw Error('\"events\" not suppported in @angular/http');\n        }\n        return observable;\n      } else {\n        return (<HttpClient>this.http).request(method, url, options);\n      }\n    }\n  };\n}\n","declare const Reflect: any;\nexport type TdParamType = 'param' | 'response' | 'body' | 'queryParams';\n\nexport const tdHttpRESTParam: Symbol = Symbol('TdHttpRESTParam');\n\n/**\n * Abstract implementation of the http param decorator\n * @internal\n */\nexport function TdAbstractParam(type: TdParamType, param?: string): Function {\n  return function (target: Object, propertyKey: string | symbol, parameterIndex: number): void {\n    let parameters: { index: number, param: string, type: TdParamType }[] = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyKey) || [];\n    parameters.push({\n      index: parameterIndex,\n      param: param,\n      type: type,\n    });\n    Reflect.defineMetadata(tdHttpRESTParam, parameters, target, propertyKey);\n  };\n}\n","import { HttpParams } from '@angular/common/http';\n\nimport { TdHttpMethod, ITdHttpRESTOptions, ITdHttpRESTOptionsWithBody, NOOP_HTTP } from '../../http.mixin';\nimport { TdParamType, tdHttpRESTParam } from '../params/abstract-param.decorator';\n\ndeclare const Reflect: any;\n\n/**\n * Method used to copy parameters from an array or HttpParams object\n * into a centrilized HttpParams object\n * @internal\n */\nexport function parseParams(target: HttpParams, source: HttpParams | {[key: string]: string | string[]}): HttpParams {\n  let queryParams: HttpParams = target;\n  if (source instanceof HttpParams) {\n    source.keys().forEach((key: string) => {\n      // skip if value is undefined\n      if ((<HttpParams>source).get(key) !== undefined) {\n        queryParams = queryParams.set(key, (<HttpParams>source).get(key));\n      }\n    });\n  } else {\n    for (let key in source) {\n      // skip if value is undefined\n      if (<any>source[key] !== undefined) {\n        queryParams = queryParams.set(key, <any>source[key]);\n      }\n    }\n  }\n  return queryParams;\n}\n\n/**\n * Abstract implementation of the http method decorator\n * @internal\n */\nexport function TdAbstractMethod(config: {\n  method: TdHttpMethod,\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return function (target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>): any {\n    let wrappedFunction: Function = descriptor.value;\n    // replace method call with our own and proxy it\n    descriptor.value = function (): any {\n      try {\n        let replacedPath: string = config.path;\n        let parameters: { index: number, param: string, type: TdParamType }[] = Reflect.getOwnMetadata(tdHttpRESTParam, target, propertyName);\n        let newArgs: any[] = [];\n        let body: any;\n        let queryParams: HttpParams = new HttpParams();\n        if (parameters) {\n          // map parameters and see which type they are to act on them\n          for (let parameter of parameters) {\n            if (parameter.type === 'param') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              replacedPath = replacedPath.replace(':' + parameter.param, arguments[parameter.index]);\n            } else if (parameter.type === 'body') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              body = arguments[parameter.index];\n            } else if (parameter.type === 'queryParams') {\n              newArgs[parameter.index] = arguments[parameter.index];\n              let qParams: HttpParams | {[key: string]: string | string[]} = arguments[parameter.index];\n              if (config.options && config.options.params) {\n                queryParams = parseParams(queryParams, config.options.params);\n              }\n              if (qParams) {\n                queryParams = parseParams(queryParams, qParams);\n              }\n            }\n          }\n        }\n        // tslint:disable-next-line\n        let url: string = this.baseUrl + replacedPath;\n        let options: ITdHttpRESTOptionsWithBody = Object.assign({}, config.options, {\n          body: body,\n          params: queryParams,\n        });\n        // tslint:disable-next-line\n        let request: any = this.buildRequest(config.method, url, options);\n        if (parameters) {\n          // see which one was the response parameter so we can set the request observable\n          for (let parameter of parameters) {\n            if (parameter.type === 'response') {\n              newArgs[parameter.index] = request;\n            }\n          }\n        }\n        // tslint:disable-next-line\n        let response: any = wrappedFunction.apply(this, newArgs);\n        // if the response is NOOP_HTTP or undefined, then we return the request as it is\n        // else we return the response from the inner function\n        if (response === NOOP_HTTP || response === undefined) {\n          return request;\n        } else {\n          return response;\n        }\n      } catch (error) {\n        // tslint:disable-next-line\n        console.error(error);\n      }\n    };\n  };\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds GET request capabilities to a method\n */\nexport function GET(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'GET',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds POST request capabilities to a method\n */\nexport function POST(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'POST',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds PATCH request capabilities to a method\n */\nexport function PATCH(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'PATCH',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds PUT request capabilities to a method\n */\nexport function PUT(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'PUT',\n  }, config));\n}\n","import { ITdHttpRESTOptions } from '../../';\nimport { TdAbstractMethod } from './abstract-method.decorator';\n\n/**\n * Decorator that adds DELETE request capabilities to a method\n */\nexport function DELETE(config: {\n  path: string,\n  options?: ITdHttpRESTOptions,\n}): Function {\n  return TdAbstractMethod(<any>Object.assign({\n    method: 'DELETE',\n  }, config));\n}\n","import { mixinHttp, ITdHttpRESTConfig } from '../../http.mixin';\n\n/**\n * Decorator used to give a service http capabilities\n */\nexport function TdHttp(config: ITdHttpRESTConfig): Function {\n  return function <T extends { new(...args: any[]): {} }>(constructor: any): any {\n    return class extends mixinHttp(constructor, config) {\n     \n    };\n  };\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is an http parameter in a method\n */\nexport function TdParam(param: string): Function {\n  return TdAbstractParam('param', param);\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http body in a method\n */\nexport function TdBody(): Function {\n  return TdAbstractParam('body');\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http response in a method\n */\nexport function TdResponse(): Function {\n  return TdAbstractParam('response');\n}\n","import { TdAbstractParam } from './abstract-param.decorator';\n\n/**\n * Decorator that is used to define which parameter is the http query parameters in a method\n */\nexport function TdQueryParams(): Function {\n  return TdAbstractParam('queryParams');\n}\n"]}